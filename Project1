{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Amazon_Reviews_Price_Prediction.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 153,
      "metadata": {
        "id": "aRSGstkmjrYu"
      },
      "outputs": [],
      "source": [
        "# Importing important libraries:\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from skimage import io\n",
        "import pydot\n",
        "from sklearn.impute import SimpleImputer\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Input, Dropout, Dense, concatenate, GRU, Embedding, Flatten\n",
        "from tensorflow.keras.layers import Conv1D, Reshape\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint, Callback, EarlyStopping\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras import backend as K\n",
        "from tensorflow.keras.utils import plot_model\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline \n",
        "import math, time, os,gc"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Print all outputs from a cell:\n",
        "\n",
        "from IPython.core.interactiveshell import InteractiveShell\n",
        "InteractiveShell.ast_node_interactivity = \"all\""
      ],
      "metadata": {
        "id": "arAwgoznjvWn"
      },
      "execution_count": 154,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mounting google drive:\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/gdrive')  "
      ],
      "metadata": {
        "id": "4XXBKKAUjxwx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73e017ae-655b-4648-ba25-39d1d95e4944"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(\"/gdrive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "path = \"/gdrive/MyDrive/FA_Project/\""
      ],
      "metadata": {
        "id": "QvwpAB_7jzuR"
      },
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "OTg8hF192MJS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Reading dataset:\n",
        "%%time\n",
        "\n",
        "print(\"---Loading data---\")\n",
        "\n",
        "df = pd.read_csv(path+\"Amazon_Unlocked_Mobile.csv\")\n",
        "\n",
        "print(\"---finished reading---\")"
      ],
      "metadata": {
        "id": "VU58lqUXj2vh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "72860c7b-375e-4f1c-8bd2-be322fabd13f"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---Loading data---\n",
            "---finished reading---\n",
            "CPU times: user 893 ms, sys: 120 ms, total: 1.01 s\n",
            "Wall time: 1.14 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Displaying first 5 rows of dataset:\n",
        "df.head()"
      ],
      "metadata": {
        "id": "0JSYSY8pj4rC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "b1580525-4461-4ff1-d21a-bf043b1e9e35"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-431b9c34-8eec-4adf-9b18-f1cb06d19336\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product Name</th>\n",
              "      <th>Brand Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review Votes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>5</td>\n",
              "      <td>I feel so LUCKY to have found this used (phone...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>4</td>\n",
              "      <td>nice phone, nice up grade from my pantach revu...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>5</td>\n",
              "      <td>Very pleased</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>4</td>\n",
              "      <td>It works good but it goes slow sometimes but i...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>\"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>199.99</td>\n",
              "      <td>4</td>\n",
              "      <td>Great phone to replace my lost phone. The only...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-431b9c34-8eec-4adf-9b18-f1cb06d19336')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-431b9c34-8eec-4adf-9b18-f1cb06d19336 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-431b9c34-8eec-4adf-9b18-f1cb06d19336');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                        Product Name  ... Review Votes\n",
              "0  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          1.0\n",
              "1  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "2  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "3  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "4  \"CLEAR CLEAN ESN\" Sprint EPIC 4G Galaxy SPH-D7...  ...          0.0\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Renaming Brand Name for further preprocessing:\n",
        "df.rename(columns = {'Product Name':'Product_Name','Brand Name':'Brand_Name','Review Votes':'Review_Votes'}, inplace = True)"
      ],
      "metadata": {
        "id": "hBcQvr-Hon67"
      },
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"---\")\n",
        "print(f\"dataset shape: {df.shape}\")\n",
        "print(\"---\\n\")\n"
      ],
      "metadata": {
        "id": "rZkYyGGRj6d-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2671d1e3-674a-4fd2-b2c0-124206490d0d"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---\n",
            "dataset shape: (413840, 6)\n",
            "---\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"---\")\n",
        "print(f\"Memory Usage : {sum(df.memory_usage())/10**6} MB\")\n",
        "print(\"---\\n\")"
      ],
      "metadata": {
        "id": "D1C6AxXlj8JD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3398d8a8-1948-429e-8ef1-921c16c46e20"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---\n",
            "Memory Usage : 19.864448 MB\n",
            "---\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"---\")\n",
        "print(f\"Null columns: {df.isnull().sum().sort_values()}\")\n",
        "print(\"---\\n\")"
      ],
      "metadata": {
        "id": "Afxe4SXOm1VM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cb8d24b6-b89a-4d82-b449-c567f89aada0"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---\n",
            "Null columns: Product_Name        0\n",
            "Rating              0\n",
            "Reviews            62\n",
            "Price            5933\n",
            "Review_Votes    12296\n",
            "Brand_Name      65171\n",
            "dtype: int64\n",
            "---\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Displaying columns of dataset:\n",
        "df.columns.values\n",
        "\n",
        "# Checking data types of each column:\n",
        "df.dtypes"
      ],
      "metadata": {
        "id": "BmnnBFbvnBv9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ac8c5635-2338-447a-be9f-d36cb85db520"
      },
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Product_Name', 'Brand_Name', 'Price', 'Rating', 'Reviews',\n",
              "       'Review_Votes'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 163
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product_Name     object\n",
              "Brand_Name       object\n",
              "Price           float64\n",
              "Rating            int64\n",
              "Reviews          object\n",
              "Review_Votes    float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Imputing missing values"
      ],
      "metadata": {
        "id": "TQQ03s0P2DVl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_c = df.copy()"
      ],
      "metadata": {
        "id": "VTzfXkZDtZnI"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing Price values:\n",
        "imputer = SimpleImputer(missing_values = np.nan, strategy ='mean')\n",
        "imputer = imputer.fit(df_c[['Price']])\n",
        "df_c['Price'] = imputer.transform(df_c[['Price']])\n",
        "df_c['Price']"
      ],
      "metadata": {
        "id": "4g2QcXimq1nX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a56079f0-c515-41b7-da51-59c59f43d2b8"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         199.99\n",
              "1         199.99\n",
              "2         199.99\n",
              "3         199.99\n",
              "4         199.99\n",
              "           ...  \n",
              "413835     79.95\n",
              "413836     79.95\n",
              "413837     79.95\n",
              "413838     79.95\n",
              "413839     79.95\n",
              "Name: Price, Length: 413840, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing Rating values:\n",
        "imputer = imputer.fit(df_c[['Rating']])\n",
        "df_c['Rating'] = imputer.transform(df_c[['Rating']])\n",
        "df_c['Rating']"
      ],
      "metadata": {
        "id": "iJVQ0LfktEam",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8219f39d-98d8-4a05-c1b2-374e23ce7dd2"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         5.0\n",
              "1         4.0\n",
              "2         5.0\n",
              "3         4.0\n",
              "4         4.0\n",
              "         ... \n",
              "413835    5.0\n",
              "413836    3.0\n",
              "413837    5.0\n",
              "413838    3.0\n",
              "413839    4.0\n",
              "Name: Rating, Length: 413840, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 166
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing Review_Votes values:\n",
        "imputer = imputer.fit(df_c[['Review_Votes']])\n",
        "df_c['Review_Votes'] = imputer.transform(df_c[['Review_Votes']])\n",
        "df_c['Review_Votes']"
      ],
      "metadata": {
        "id": "prYqs_QfumBq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "485472de-4d90-49ac-d01a-94e7a8fb8063"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         1.0\n",
              "1         0.0\n",
              "2         0.0\n",
              "3         0.0\n",
              "4         0.0\n",
              "         ... \n",
              "413835    0.0\n",
              "413836    0.0\n",
              "413837    0.0\n",
              "413838    0.0\n",
              "413839    0.0\n",
              "Name: Review_Votes, Length: 413840, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing Brand_Name values:\n",
        "imputer = SimpleImputer(missing_values = np.nan, strategy ='most_frequent')\n",
        "imputer = imputer.fit(df_c[['Brand_Name']])\n",
        "df_c['Brand_Name'] = imputer.transform(df_c[['Brand_Name']])\n",
        "df_c['Brand_Name']"
      ],
      "metadata": {
        "id": "-yTKVfR8u-Ea",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e1cabb89-1227-4daf-9af5-f1d0505f8f45"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         Samsung\n",
              "1         Samsung\n",
              "2         Samsung\n",
              "3         Samsung\n",
              "4         Samsung\n",
              "           ...   \n",
              "413835    Samsung\n",
              "413836    Samsung\n",
              "413837    Samsung\n",
              "413838    Samsung\n",
              "413839    Samsung\n",
              "Name: Brand_Name, Length: 413840, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing Reviews:\n",
        "imputer = imputer.fit(df_c[['Reviews']])\n",
        "df_c['Reviews'] = imputer.transform(df_c[['Reviews']])\n",
        "df_c['Reviews']"
      ],
      "metadata": {
        "id": "EVPcjwkVvfYc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d1546b5-2fca-4c12-94cc-24a9db547345"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         I feel so LUCKY to have found this used (phone...\n",
              "1         nice phone, nice up grade from my pantach revu...\n",
              "2                                              Very pleased\n",
              "3         It works good but it goes slow sometimes but i...\n",
              "4         Great phone to replace my lost phone. The only...\n",
              "                                ...                        \n",
              "413835                       another great deal great price\n",
              "413836                                                   Ok\n",
              "413837          Passes every drop test onto porcelain tile!\n",
              "413838    I returned it because it did not meet my needs...\n",
              "413839    Only downside is that apparently Verizon no lo...\n",
              "Name: Reviews, Length: 413840, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Now checking null values:\n",
        "print(\"---\")\n",
        "print(f\"Null columns: {df_c.isnull().sum().sort_values()}\")\n",
        "print(\"---\\n\")"
      ],
      "metadata": {
        "id": "G3p9X-iWwPD8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f91eb54-9183-473f-e9b5-f13c7cb27ea6"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---\n",
            "Null columns: Product_Name    0\n",
            "Brand_Name      0\n",
            "Price           0\n",
            "Rating          0\n",
            "Reviews         0\n",
            "Review_Votes    0\n",
            "dtype: int64\n",
            "---\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Again checking the dataset:\n",
        "df_c = df_c.sample(frac=1.0)\n",
        "df_c.head()"
      ],
      "metadata": {
        "id": "g2XUyHy-wZ0_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "7d876cdb-a63d-4e39-9d2b-0fb8b576a22c"
      },
      "execution_count": 171,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-9d8c50e2-030c-4bd7-8072-b61b84b8608e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Brand_Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review_Votes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>297478</th>\n",
              "      <td>POSH MOBILE MICRO X, The Smallest Smartphone i...</td>\n",
              "      <td>Posh Mobile</td>\n",
              "      <td>49.91</td>\n",
              "      <td>5.0</td>\n",
              "      <td>This is the first time I bought a Posh as repl...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78222</th>\n",
              "      <td>Apple Smart Watch Sport 38mm - Silver/White (C...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>264.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>the product arrived with no problems, everythi...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89267</th>\n",
              "      <td>BlackBerry Bold 9900 GSM Factory Unlocked Phon...</td>\n",
              "      <td>BlackBerry</td>\n",
              "      <td>85.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>BB works best with touchpad and the software p...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21926</th>\n",
              "      <td>Apple iPhone 5 Unlocked Cellphone, 32GB, White</td>\n",
              "      <td>Apple</td>\n",
              "      <td>265.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Just great.</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288544</th>\n",
              "      <td>OtterBox Samsung Galaxy S5 Defender Series Pro...</td>\n",
              "      <td>Ultrabox</td>\n",
              "      <td>14.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Not otterbox made but works like a charm.</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d8c50e2-030c-4bd7-8072-b61b84b8608e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9d8c50e2-030c-4bd7-8072-b61b84b8608e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9d8c50e2-030c-4bd7-8072-b61b84b8608e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                             Product_Name  ... Review_Votes\n",
              "297478  POSH MOBILE MICRO X, The Smallest Smartphone i...  ...          1.0\n",
              "78222   Apple Smart Watch Sport 38mm - Silver/White (C...  ...          1.0\n",
              "89267   BlackBerry Bold 9900 GSM Factory Unlocked Phon...  ...          0.0\n",
              "21926      Apple iPhone 5 Unlocked Cellphone, 32GB, White  ...          0.0\n",
              "288544  OtterBox Samsung Galaxy S5 Defender Series Pro...  ...          0.0\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Label-Encoding Categorical Column Values\n"
      ],
      "metadata": {
        "id": "FZEJWZFQ1zLv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Label Encode categorical values:\n",
        "df_c.Brand_Name.shape"
      ],
      "metadata": {
        "id": "gfrHjbLoxvLr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6887b857-2c04-4a11-bdb5-d953880a1400"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(413840,)"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating Brand_Name data into one dimensional array:\n",
        "brname_array = np.hstack([df_c.Brand_Name.values])\n",
        "brname_array.shape # checking shape of 1-D array\n",
        "print(\"\\n\")\n",
        "brname_array[:3] # displaying some values"
      ],
      "metadata": {
        "id": "Gohw2aG2zu-p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1beb3e3f-b06d-446e-da44-fd9f0df738c9"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(413840,)"
            ]
          },
          "metadata": {},
          "execution_count": 173
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Posh Mobile', 'Samsung', 'BlackBerry'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Instantiate another object for brand name transformation:\n",
        "le = LabelEncoder()\n",
        "\n",
        "# fit and transform\n",
        "le.fit(brname_array)\n",
        "df_c.Brand_Name = le.transform(df_c.Brand_Name.values)"
      ],
      "metadata": {
        "id": "ExnZ7i8gz62J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bba5e226-ea9c-49aa-c207-ea2276dac226"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LabelEncoder()"
            ]
          },
          "metadata": {},
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Look at transformed data:\n",
        "df_c.head()"
      ],
      "metadata": {
        "id": "1CZQacTN1Y2l",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "8d7dd85a-2903-4ab4-a7be-53fb472e3e58"
      },
      "execution_count": 175,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-5c58b3c8-51bc-4fcd-86d5-974e7bfc079a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Brand_Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review_Votes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>297478</th>\n",
              "      <td>POSH MOBILE MICRO X, The Smallest Smartphone i...</td>\n",
              "      <td>220</td>\n",
              "      <td>49.91</td>\n",
              "      <td>5.0</td>\n",
              "      <td>This is the first time I bought a Posh as repl...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78222</th>\n",
              "      <td>Apple Smart Watch Sport 38mm - Silver/White (C...</td>\n",
              "      <td>252</td>\n",
              "      <td>264.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>the product arrived with no problems, everythi...</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89267</th>\n",
              "      <td>BlackBerry Bold 9900 GSM Factory Unlocked Phon...</td>\n",
              "      <td>22</td>\n",
              "      <td>85.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>BB works best with touchpad and the software p...</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21926</th>\n",
              "      <td>Apple iPhone 5 Unlocked Cellphone, 32GB, White</td>\n",
              "      <td>14</td>\n",
              "      <td>265.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Just great.</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288544</th>\n",
              "      <td>OtterBox Samsung Galaxy S5 Defender Series Pro...</td>\n",
              "      <td>310</td>\n",
              "      <td>14.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Not otterbox made but works like a charm.</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c58b3c8-51bc-4fcd-86d5-974e7bfc079a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5c58b3c8-51bc-4fcd-86d5-974e7bfc079a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5c58b3c8-51bc-4fcd-86d5-974e7bfc079a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                             Product_Name  ...  Review_Votes\n",
              "297478  POSH MOBILE MICRO X, The Smallest Smartphone i...  ...           1.0\n",
              "78222   Apple Smart Watch Sport 38mm - Silver/White (C...  ...           1.0\n",
              "89267   BlackBerry Bold 9900 GSM Factory Unlocked Phon...  ...           0.0\n",
              "21926      Apple iPhone 5 Unlocked Cellphone, 32GB, White  ...           0.0\n",
              "288544  OtterBox Samsung Galaxy S5 Defender Series Pro...  ...           0.0\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Transforming text values in Product_Name and Reviews"
      ],
      "metadata": {
        "id": "xg1YZE0Q2d85"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Vectorizing Product Name into integers:\n",
        "\n",
        "raw_text_1 = np.hstack([df_c.Product_Name.values])"
      ],
      "metadata": {
        "id": "-fqir2731d3m"
      },
      "execution_count": 176,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# tokenizing raw text:\n",
        "tok_raw_1 = Tokenizer()\n",
        "tok_raw_1.fit_on_texts(raw_text_1)"
      ],
      "metadata": {
        "id": "vrcqqM5p4FEy"
      },
      "execution_count": 177,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Transforming of text to integer sequence for Product_Name\")\n",
        "df_c[\"Seq_Product_Name\"] = tok_raw_1.texts_to_sequences(df_c.Product_Name.values)\n",
        "print(\"-----\\n\")"
      ],
      "metadata": {
        "id": "qKBgVFA342Ki",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "689bddd2-d180-4ba1-eb3f-19c88ae5e23d"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Transforming of text to integer sequence for Product_Name\n",
            "-----\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking dataset:\n",
        "df_c.head()"
      ],
      "metadata": {
        "id": "cPC3zHQc5u0F",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "5e5823f5-3c40-417d-da65-20162e1595f9"
      },
      "execution_count": 179,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-ee031533-b5ca-4279-beaa-7e629c03eb37\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Brand_Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review_Votes</th>\n",
              "      <th>Seq_Product_Name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>297478</th>\n",
              "      <td>POSH MOBILE MICRO X, The Smallest Smartphone i...</td>\n",
              "      <td>220</td>\n",
              "      <td>49.91</td>\n",
              "      <td>5.0</td>\n",
              "      <td>This is the first time I bought a Posh as repl...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>[133, 61, 226, 93, 246, 478, 3, 73, 246, 301, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78222</th>\n",
              "      <td>Apple Smart Watch Sport 38mm - Silver/White (C...</td>\n",
              "      <td>252</td>\n",
              "      <td>264.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>the product arrived with no problems, everythi...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>[12, 65, 50, 262, 302, 41, 7, 54, 56]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89267</th>\n",
              "      <td>BlackBerry Bold 9900 GSM Factory Unlocked Phon...</td>\n",
              "      <td>22</td>\n",
              "      <td>85.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>BB works best with touchpad and the software p...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[57, 191, 615, 2, 24, 1, 4, 25, 9, 5]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21926</th>\n",
              "      <td>Apple iPhone 5 Unlocked Cellphone, 32GB, White</td>\n",
              "      <td>14</td>\n",
              "      <td>265.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Just great.</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[12, 10, 6, 1, 32, 20, 7]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288544</th>\n",
              "      <td>OtterBox Samsung Galaxy S5 Defender Series Pro...</td>\n",
              "      <td>310</td>\n",
              "      <td>14.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Not otterbox made but works like a charm.</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[100, 8, 11, 75, 132, 172, 235, 103, 7, 39]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee031533-b5ca-4279-beaa-7e629c03eb37')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ee031533-b5ca-4279-beaa-7e629c03eb37 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ee031533-b5ca-4279-beaa-7e629c03eb37');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                             Product_Name  ...                                   Seq_Product_Name\n",
              "297478  POSH MOBILE MICRO X, The Smallest Smartphone i...  ...  [133, 61, 226, 93, 246, 478, 3, 73, 246, 301, ...\n",
              "78222   Apple Smart Watch Sport 38mm - Silver/White (C...  ...              [12, 65, 50, 262, 302, 41, 7, 54, 56]\n",
              "89267   BlackBerry Bold 9900 GSM Factory Unlocked Phon...  ...              [57, 191, 615, 2, 24, 1, 4, 25, 9, 5]\n",
              "21926      Apple iPhone 5 Unlocked Cellphone, 32GB, White  ...                          [12, 10, 6, 1, 32, 20, 7]\n",
              "288544  OtterBox Samsung Galaxy S5 Defender Series Pro...  ...        [100, 8, 11, 75, 132, 172, 235, 103, 7, 39]\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Vectorizing Reviews into integers:\n",
        "\n",
        "raw_text_2 = np.hstack([df_c.Reviews.values])"
      ],
      "metadata": {
        "id": "uoPNw21_6HV1"
      },
      "execution_count": 180,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# tokenizing raw text:\n",
        "tok_raw_2 = Tokenizer()\n",
        "tok_raw_2.fit_on_texts(raw_text_2)"
      ],
      "metadata": {
        "id": "DahmZ3sP7pFm"
      },
      "execution_count": 181,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Transforming of text to integer sequence for Reviews\")\n",
        "df_c[\"Seq_Reviews\"] = tok_raw_2.texts_to_sequences(df_c.Reviews.values)\n",
        "print(\"-----\\n\")"
      ],
      "metadata": {
        "id": "GZLyMSqb66_4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "18731187-4b19-45b0-858b-53bd91edad10"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Transforming of text to integer sequence for Reviews\n",
            "-----\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking dataset:\n",
        "df_c.head()"
      ],
      "metadata": {
        "id": "VDMjsFjS-eYO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "outputId": "d31d2b32-f432-4faa-ba09-5d1db9cc838e"
      },
      "execution_count": 183,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-1744664b-733f-46b5-a95c-68ca1b8d0f5c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Brand_Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review_Votes</th>\n",
              "      <th>Seq_Product_Name</th>\n",
              "      <th>Seq_Reviews</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>297478</th>\n",
              "      <td>POSH MOBILE MICRO X, The Smallest Smartphone i...</td>\n",
              "      <td>220</td>\n",
              "      <td>49.91</td>\n",
              "      <td>5.0</td>\n",
              "      <td>This is the first time I bought a Posh as repl...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>[133, 61, 226, 93, 246, 478, 3, 73, 246, 301, ...</td>\n",
              "      <td>[9, 8, 1, 110, 60, 2, 72, 6, 1010, 24, 359, 10...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78222</th>\n",
              "      <td>Apple Smart Watch Sport 38mm - Silver/White (C...</td>\n",
              "      <td>252</td>\n",
              "      <td>264.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>the product arrived with no problems, everythi...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>[12, 65, 50, 262, 302, 41, 7, 54, 56]</td>\n",
              "      <td>[1, 65, 233, 11, 30, 159, 115, 25, 69]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89267</th>\n",
              "      <td>BlackBerry Bold 9900 GSM Factory Unlocked Phon...</td>\n",
              "      <td>22</td>\n",
              "      <td>85.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>BB works best with touchpad and the software p...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[57, 191, 615, 2, 24, 1, 4, 25, 9, 5]</td>\n",
              "      <td>[1063, 46, 126, 11, 7401, 4, 1, 270, 2117, 17,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21926</th>\n",
              "      <td>Apple iPhone 5 Unlocked Cellphone, 32GB, White</td>\n",
              "      <td>14</td>\n",
              "      <td>265.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Just great.</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[12, 10, 6, 1, 32, 20, 7]</td>\n",
              "      <td>[37, 22]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288544</th>\n",
              "      <td>OtterBox Samsung Galaxy S5 Defender Series Pro...</td>\n",
              "      <td>310</td>\n",
              "      <td>14.99</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Not otterbox made but works like a charm.</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[100, 8, 11, 75, 132, 172, 235, 103, 7, 39]</td>\n",
              "      <td>[14, 850, 245, 18, 46, 33, 6, 1645]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1744664b-733f-46b5-a95c-68ca1b8d0f5c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1744664b-733f-46b5-a95c-68ca1b8d0f5c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1744664b-733f-46b5-a95c-68ca1b8d0f5c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                             Product_Name  ...                                        Seq_Reviews\n",
              "297478  POSH MOBILE MICRO X, The Smallest Smartphone i...  ...  [9, 8, 1, 110, 60, 2, 72, 6, 1010, 24, 359, 10...\n",
              "78222   Apple Smart Watch Sport 38mm - Silver/White (C...  ...             [1, 65, 233, 11, 30, 159, 115, 25, 69]\n",
              "89267   BlackBerry Bold 9900 GSM Factory Unlocked Phon...  ...  [1063, 46, 126, 11, 7401, 4, 1, 270, 2117, 17,...\n",
              "21926      Apple iPhone 5 Unlocked Cellphone, 32GB, White  ...                                           [37, 22]\n",
              "288544  OtterBox Samsung Galaxy S5 Defender Series Pro...  ...                [14, 850, 245, 18, 46, 33, 6, 1645]\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 183
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Creating Vocabulary"
      ],
      "metadata": {
        "id": "bGqxMDx1-vOo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# For Product Name:\n",
        "MAX_PROD_NAME_VOC = np.max([df_c.explode('Seq_Product_Name')['Seq_Product_Name'].max()]) + 2\n",
        "print(f\"Maximum Vocabulary size in Seq_Product_Name is {MAX_PROD_NAME_VOC}\")"
      ],
      "metadata": {
        "id": "qQ9QuuDg-nQt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5625a534-9e41-4eec-9459-cbf6a53a41fc"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum Vocabulary size in Seq_Product_Name is 4057\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For Reviews:\n",
        "MAX_REVIEWS_VOC = np.max([df_c.explode('Seq_Reviews')['Seq_Reviews'].max()]) + 2\n",
        "print(f\"Maximum Vocabulary size in Seq_Reviews is {MAX_REVIEWS_VOC}\")"
      ],
      "metadata": {
        "id": "HvcsuzHwA2Yn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7cbc7acb-0da5-476c-fce2-11fc6133f357"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum Vocabulary size in Seq_Reviews is 73250\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For Brand Name:\n",
        "MAX_BRAND_NAME_VOC = np.max([df_c['Brand_Name'].max()]) + 1\n",
        "print(f\"Maximum Vocabulary size in Brand_Name is {MAX_BRAND_NAME_VOC}\")"
      ],
      "metadata": {
        "id": "uWoZbqNKBJbK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01b41b91-3e09-4a1f-9d41-13cab060b362"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum Vocabulary size in Brand_Name is 384\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For Rating:\n",
        "df_c.Rating = df_c.Rating.astype(np.uint8)\n",
        "MAX_RATING_VOC = np.max([df_c['Rating'].max()]) + 1\n",
        "print(f\"Maximum Vocabulary size in Rating is {MAX_RATING_VOC}\")"
      ],
      "metadata": {
        "id": "NKJmUOyMBuPh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "929d28fb-be69-4dad-9db5-c9dc573b52c7"
      },
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum Vocabulary size in Rating is 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For Review Votes:\n",
        "df_c.Review_Votes = df_c.Review_Votes.astype(np.uint8)\n",
        "MAX_REV_VOT_VOC = np.max([df_c['Review_Votes'].max()]) + 1\n",
        "print(f\"Maximum Vocabulary size in Review_Votes is {MAX_REV_VOT_VOC}\")"
      ],
      "metadata": {
        "id": "tALyU1I_DQ1_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "11902dd6-62d1-4be6-fdaa-b8749b485dad"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum Vocabulary size in Review_Votes is 252\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get maximum length integer sequences in Seq_Product_Name and Seq_Reviews\n",
        "max_Product_Name_seq = np.max([np.max(df_c.Seq_Product_Name.apply(lambda x: len(x)))])\n",
        "max_Reviews_seq = np.max([np.max(df_c.Seq_Reviews.apply(lambda x: len(x)))])\n",
        "\n",
        "print(f\"max Seq_Product_Name length: {max_Product_Name_seq}\")\n",
        "print(f\"max Seq_Reviews length: {max_Reviews_seq}\")"
      ],
      "metadata": {
        "id": "AQkOa-AIDY80",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "21b1b36c-bc4b-4db9-f237-1a70c27a2b42"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "max Seq_Product_Name length: 73\n",
            "max Seq_Reviews length: 5199\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Histogram to look at distributions\n",
        "Look at distribution of lengths of integer sequences"
      ],
      "metadata": {
        "id": "HWCsQRMdHqHC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_c.Seq_Product_Name.apply(lambda x: len(x)).hist()"
      ],
      "metadata": {
        "id": "dvz0SsGLFwUx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "24f69bcf-9cbd-46ea-cc82-7bcfd5a8ba72"
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f267cbb21d0>"
            ]
          },
          "metadata": {},
          "execution_count": 190
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_c.Seq_Reviews.apply(lambda x: len(x)).hist()"
      ],
      "metadata": {
        "id": "zIw5kb3XH4-O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "8c3430e5-844e-4e71-d401-efbb961cc5b4"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f267cb0c050>"
            ]
          },
          "metadata": {},
          "execution_count": 191
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "MAX_PROD_NAME_SEQ = 30\n",
        "MAX_REVIEWS_SEQ = 500\n",
        "# Implication: Longer integer sequences will be truncated"
      ],
      "metadata": {
        "id": "xXgMVY8pIDan"
      },
      "execution_count": 192,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Scale 'Price' field"
      ],
      "metadata": {
        "id": "UP9fYFqwI2eY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Transforming Price Column to make target values symmetric:\n",
        "df_c[\"target\"] = np.log( df_c.Price + 1) \n",
        "target_scaler = MinMaxScaler(feature_range=(-1, 1))\n",
        "df_c[\"target\"] = target_scaler.fit_transform(df_c.target.values.reshape(-1,1))"
      ],
      "metadata": {
        "id": "XrXz17FAIvOY"
      },
      "execution_count": 193,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display histogram\n",
        "pd.DataFrame(df_c.target).hist()"
      ],
      "metadata": {
        "id": "ovu0oEwOJWQU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "outputId": "1411ccac-f6fc-4698-f0de-2b83c020143d"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f267cae4d10>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 194
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_c.head()"
      ],
      "metadata": {
        "id": "C0dRi14rJcN0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "outputId": "e9a648f0-0d0e-4844-cc0f-3ff0eeec890a"
      },
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-990183b7-d8e7-406a-ab7c-aa8b34641620\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Brand_Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review_Votes</th>\n",
              "      <th>Seq_Product_Name</th>\n",
              "      <th>Seq_Reviews</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>297478</th>\n",
              "      <td>POSH MOBILE MICRO X, The Smallest Smartphone i...</td>\n",
              "      <td>220</td>\n",
              "      <td>49.91</td>\n",
              "      <td>5</td>\n",
              "      <td>This is the first time I bought a Posh as repl...</td>\n",
              "      <td>1</td>\n",
              "      <td>[133, 61, 226, 93, 246, 478, 3, 73, 246, 301, ...</td>\n",
              "      <td>[9, 8, 1, 110, 60, 2, 72, 6, 1010, 24, 359, 10...</td>\n",
              "      <td>-0.146833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>78222</th>\n",
              "      <td>Apple Smart Watch Sport 38mm - Silver/White (C...</td>\n",
              "      <td>252</td>\n",
              "      <td>264.99</td>\n",
              "      <td>5</td>\n",
              "      <td>the product arrived with no problems, everythi...</td>\n",
              "      <td>1</td>\n",
              "      <td>[12, 65, 50, 262, 302, 41, 7, 54, 56]</td>\n",
              "      <td>[1, 65, 233, 11, 30, 159, 115, 25, 69]</td>\n",
              "      <td>0.335308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89267</th>\n",
              "      <td>BlackBerry Bold 9900 GSM Factory Unlocked Phon...</td>\n",
              "      <td>22</td>\n",
              "      <td>85.00</td>\n",
              "      <td>5</td>\n",
              "      <td>BB works best with touchpad and the software p...</td>\n",
              "      <td>0</td>\n",
              "      <td>[57, 191, 615, 2, 24, 1, 4, 25, 9, 5]</td>\n",
              "      <td>[1063, 46, 126, 11, 7401, 4, 1, 270, 2117, 17,...</td>\n",
              "      <td>0.006052</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21926</th>\n",
              "      <td>Apple iPhone 5 Unlocked Cellphone, 32GB, White</td>\n",
              "      <td>14</td>\n",
              "      <td>265.00</td>\n",
              "      <td>5</td>\n",
              "      <td>Just great.</td>\n",
              "      <td>0</td>\n",
              "      <td>[12, 10, 6, 1, 32, 20, 7]</td>\n",
              "      <td>[37, 22]</td>\n",
              "      <td>0.335319</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>288544</th>\n",
              "      <td>OtterBox Samsung Galaxy S5 Defender Series Pro...</td>\n",
              "      <td>310</td>\n",
              "      <td>14.99</td>\n",
              "      <td>5</td>\n",
              "      <td>Not otterbox made but works like a charm.</td>\n",
              "      <td>0</td>\n",
              "      <td>[100, 8, 11, 75, 132, 172, 235, 103, 7, 39]</td>\n",
              "      <td>[14, 850, 245, 18, 46, 33, 6, 1645]</td>\n",
              "      <td>-0.484540</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-990183b7-d8e7-406a-ab7c-aa8b34641620')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-990183b7-d8e7-406a-ab7c-aa8b34641620 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-990183b7-d8e7-406a-ab7c-aa8b34641620');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                             Product_Name  ...    target\n",
              "297478  POSH MOBILE MICRO X, The Smallest Smartphone i...  ... -0.146833\n",
              "78222   Apple Smart Watch Sport 38mm - Silver/White (C...  ...  0.335308\n",
              "89267   BlackBerry Bold 9900 GSM Factory Unlocked Phon...  ...  0.006052\n",
              "21926      Apple iPhone 5 Unlocked Cellphone, 32GB, White  ...  0.335319\n",
              "288544  OtterBox Samsung Galaxy S5 Defender Series Pro...  ... -0.484540\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Modeling steps"
      ],
      "metadata": {
        "id": "qHqlOAekJvNw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split into train and test:\n",
        "train , test = train_test_split(df_c, random_state=123, train_size=0.8)\n",
        "print(train.shape)  \n",
        "print(test.shape)"
      ],
      "metadata": {
        "id": "1tLEvNp2Jo2G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3afd8d4e-a81d-496e-9b89-7e64eb1ae106"
      },
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(331072, 9)\n",
            "(82768, 9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking train data:\n",
        "train.head()"
      ],
      "metadata": {
        "id": "h6fWEUj5LVyf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "outputId": "710bc7cb-67ec-4f82-e780-18ce7b5a09d8"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-f0595ee5-cede-439e-9efb-96abefb63ed7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Product_Name</th>\n",
              "      <th>Brand_Name</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Review_Votes</th>\n",
              "      <th>Seq_Product_Name</th>\n",
              "      <th>Seq_Reviews</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>237495</th>\n",
              "      <td>LG Spectrum 4G Android Phone (Verizon Wireless)</td>\n",
              "      <td>151</td>\n",
              "      <td>58.95</td>\n",
              "      <td>1</td>\n",
              "      <td>Piece of junk</td>\n",
              "      <td>0</td>\n",
              "      <td>[35, 1411, 17, 16, 4, 34, 83]</td>\n",
              "      <td>[638, 12, 864]</td>\n",
              "      <td>-0.099169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286925</th>\n",
              "      <td>OtterBox RealTree Defender Case Apple iPhone 5...</td>\n",
              "      <td>203</td>\n",
              "      <td>16.99</td>\n",
              "      <td>5</td>\n",
              "      <td>Arrived just as described very quickly. I woul...</td>\n",
              "      <td>0</td>\n",
              "      <td>[100, 319, 132, 103, 12, 10, 6, 48, 47, 248, 3...</td>\n",
              "      <td>[233, 37, 24, 337, 25, 393, 2, 48, 330, 132, 9...</td>\n",
              "      <td>-0.450174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>281725</th>\n",
              "      <td>OtterBox Defender Series Case for Apple iPhone...</td>\n",
              "      <td>252</td>\n",
              "      <td>24.99</td>\n",
              "      <td>2</td>\n",
              "      <td>I am wondering if this is real OtterBox produc...</td>\n",
              "      <td>1</td>\n",
              "      <td>[100, 132, 172, 103, 63, 12, 10, 52, 46, 506, ...</td>\n",
              "      <td>[2, 68, 2168, 38, 9, 8, 529, 850, 65, 1, 411, ...</td>\n",
              "      <td>-0.342893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142771</th>\n",
              "      <td>BLU Studio 6.0 Unlocked Cellphone, White</td>\n",
              "      <td>19</td>\n",
              "      <td>971.60</td>\n",
              "      <td>3</td>\n",
              "      <td>just an average phone</td>\n",
              "      <td>0</td>\n",
              "      <td>[23, 51, 52, 33, 1, 32, 7]</td>\n",
              "      <td>[37, 45, 970, 5]</td>\n",
              "      <td>0.713378</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209022</th>\n",
              "      <td>Lenovo A916 8GB White, Dual Sim, 5.5 inch, Unl...</td>\n",
              "      <td>252</td>\n",
              "      <td>86.88</td>\n",
              "      <td>5</td>\n",
              "      <td>this product is excellent. based on the price ...</td>\n",
              "      <td>0</td>\n",
              "      <td>[215, 423, 42, 7, 27, 29, 6, 6, 67, 1, 15, 119...</td>\n",
              "      <td>[9, 65, 8, 89, 944, 19, 1, 63, 838, 21, 142, 8...</td>\n",
              "      <td>0.012358</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0595ee5-cede-439e-9efb-96abefb63ed7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f0595ee5-cede-439e-9efb-96abefb63ed7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f0595ee5-cede-439e-9efb-96abefb63ed7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "                                             Product_Name  ...    target\n",
              "237495    LG Spectrum 4G Android Phone (Verizon Wireless)  ... -0.099169\n",
              "286925  OtterBox RealTree Defender Case Apple iPhone 5...  ... -0.450174\n",
              "281725  OtterBox Defender Series Case for Apple iPhone...  ... -0.342893\n",
              "142771           BLU Studio 6.0 Unlocked Cellphone, White  ...  0.713378\n",
              "209022  Lenovo A916 8GB White, Dual Sim, 5.5 inch, Unl...  ...  0.012358\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_keras_data(dataset):\n",
        "    X = {   \n",
        "        'Product_Name_in': pad_sequences(dataset.Seq_Product_Name, maxlen=MAX_PROD_NAME_SEQ),\n",
        "        'Reviews_in':      pad_sequences(dataset.Seq_Reviews, maxlen=MAX_REVIEWS_SEQ),\n",
        "        'Brand_Name_in':   dataset.Brand_Name.values,\n",
        "        'Rating_in':       dataset.Rating.values,\n",
        "        'Review_Votes_in': dataset.Review_Votes.values,\n",
        "    }\n",
        "    return X"
      ],
      "metadata": {
        "id": "VbelqKGcL6Lk"
      },
      "execution_count": 198,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating X_train now:\n",
        "X_train = get_keras_data(train)\n",
        "y_train = train.target.values"
      ],
      "metadata": {
        "id": "T97j7BTSOvks"
      },
      "execution_count": 199,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking Column Values in dict format:\n",
        "X_train.keys()"
      ],
      "metadata": {
        "id": "SF4_fucLO0xO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c26d6574-4b65-4143-87ae-e0b21b347d84"
      },
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['Product_Name_in', 'Reviews_in', 'Brand_Name_in', 'Rating_in', 'Review_Votes_in'])"
            ]
          },
          "metadata": {},
          "execution_count": 200
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Observe X_train:\n",
        "# Print 2 values for each data:\n",
        "\n",
        "for key, value in X_train.items():\n",
        "    print(\"\\n\\n============\")\n",
        "    print(key, ' : ', value[:2])"
      ],
      "metadata": {
        "id": "D7xizO_NO5ge",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d9709ca-9864-4f03-9fc5-08c77fffce08"
      },
      "execution_count": 201,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "============\n",
            "Product_Name_in  :  [[   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0   35 1411   17   16    4\n",
            "    34   83]\n",
            " [   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0  100  319  132  103   12   10    6   48   47  248\n",
            "   358  145]]\n",
            "\n",
            "\n",
            "============\n",
            "Reviews_in  :  [[   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0  638   12  864]\n",
            " [   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0  233   37   24\n",
            "   337   25  393    2   48  330  132    9  134 2731]]\n",
            "\n",
            "\n",
            "============\n",
            "Brand_Name_in  :  [151 203]\n",
            "\n",
            "\n",
            "============\n",
            "Rating_in  :  [1 5]\n",
            "\n",
            "\n",
            "============\n",
            "Review_Votes_in  :  [0 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Similarly get subsets for X_test:\n",
        "\n",
        "X_test = get_keras_data(test)\n",
        "y_test = test.target.values"
      ],
      "metadata": {
        "id": "5mPkWBJoPOyk"
      },
      "execution_count": 202,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining Callbacks:\n",
        "callbacks = [\n",
        "    EarlyStopping(\n",
        "        # Stop training when `val_loss` is no longer improving\n",
        "        monitor=\"loss\",\n",
        "        # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n",
        "        min_delta=1e-2,\n",
        "        # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n",
        "        patience=2,\n",
        "        verbose=1,\n",
        "    )\n",
        "]"
      ],
      "metadata": {
        "id": "-9tNooC0Pg1z"
      },
      "execution_count": 203,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining Vector space for different variables:\n",
        "\n",
        "word2vec_size_1 = 20   # For Product_Name column\n",
        "word2vec_size_2 = 50   # For Reviews column\n",
        "cat2vec_size = 10    # For Brand_Name\n",
        "r2vec_size = 5    # For Rating and Review_Votes"
      ],
      "metadata": {
        "id": "VXv2uXv0Qgii"
      },
      "execution_count": 204,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_model():\n",
        "\n",
        "  # 5 Inputs. At each input specify number of input-features:\n",
        "  Product_Name =  Input(shape=[X_train[\"Product_Name_in\"].shape[1]], name=\"Product_Name_in\")         \n",
        "  Reviews =       Input(shape=[X_train[\"Reviews_in\"].shape[1]], name=\"Reviews_in\")      \n",
        "  Brand_Name =    Input(shape=[1], name=\"Brand_Name_in\")     \n",
        "  Rating =        Input(shape=[1], name=\"Rating_in\")  \n",
        "  Review_Votes =  Input(shape=[1], name=\"Review_Votes_in\")\n",
        "\n",
        "  # 5 Embeddings layers.  Embedding vectors of first 5 of the above:\n",
        "  emb_Product_Name = Embedding(MAX_PROD_NAME_VOC, word2vec_size_1)(Product_Name)               \n",
        "  emb_Reviews =      Embedding(MAX_REVIEWS_VOC, word2vec_size_2)(Reviews)\n",
        "  emb_Brand_Name =   Embedding(MAX_BRAND_NAME_VOC, cat2vec_size  )(Brand_Name)\n",
        "  emb_Rating =       Embedding(MAX_RATING_VOC,  cat2vec_size  )(Rating)\n",
        "  emb_Review_Votes = Embedding(MAX_REV_VOT_VOC, r2vec_size )(Review_Votes)\n",
        "\n",
        "  # TWO RNN layers: \n",
        "  rnn_layer1 = GRU(8)(emb_Product_Name)          \n",
        "  rnn_layer2 = GRU(16)(emb_Reviews)\n",
        "\n",
        " \n",
        "  # Concatenate\n",
        "  main_l = concatenate(\n",
        "                        [\n",
        "                          Flatten()(emb_Brand_Name),\n",
        "                          Flatten()(emb_Rating),\n",
        "                          Flatten()(emb_Review_Votes),\n",
        "                          rnn_layer1,\n",
        "                          rnn_layer2,\n",
        "                        ]\n",
        "                      )\n",
        "  \n",
        "  # Classification with dense layers: \n",
        "  dr_r = 0.1   \n",
        "  main_l = Dense(128) (main_l)\n",
        "  main_l = Dropout(dr_r)(main_l)\n",
        "  main_l = Dense(64) (main_l)\n",
        "  main_l = Dropout(dr_r) (main_l)\n",
        "  output = Dense(1, activation=\"linear\") (main_l)\n",
        "\n",
        "  # 25 Formulate Model now\n",
        "  model = Model(\n",
        "              inputs= [                     \n",
        "                        Product_Name,\n",
        "                        Reviews,\n",
        "                        Brand_Name,\n",
        "                        Rating,\n",
        "                        Review_Votes,\n",
        "                       ],\n",
        "              outputs= output\n",
        "              )\n",
        "\n",
        "  return model"
      ],
      "metadata": {
        "id": "HibgA90odYfe"
      },
      "execution_count": 205,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Formulate Model now:\n",
        "model = create_model()"
      ],
      "metadata": {
        "id": "6CJgnhWOeR7E"
      },
      "execution_count": 206,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compiling model:\n",
        "model.compile(loss=\"mse\",\n",
        "              optimizer=\"adam\",\n",
        "              metrics=[\"mae\"]    # Not using rmsle_cust\n",
        "              )"
      ],
      "metadata": {
        "id": "rS-bbB3weYI1"
      },
      "execution_count": 207,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Model and show summary:    \n",
        "model.summary()"
      ],
      "metadata": {
        "id": "19mMLWcJecUS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a731c62-a939-4ffb-89c1-1b72309c268b"
      },
      "execution_count": 208,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_2\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " Brand_Name_in (InputLayer)     [(None, 1)]          0           []                               \n",
            "                                                                                                  \n",
            " Rating_in (InputLayer)         [(None, 1)]          0           []                               \n",
            "                                                                                                  \n",
            " Review_Votes_in (InputLayer)   [(None, 1)]          0           []                               \n",
            "                                                                                                  \n",
            " Product_Name_in (InputLayer)   [(None, 30)]         0           []                               \n",
            "                                                                                                  \n",
            " Reviews_in (InputLayer)        [(None, 500)]        0           []                               \n",
            "                                                                                                  \n",
            " embedding_12 (Embedding)       (None, 1, 10)        3840        ['Brand_Name_in[0][0]']          \n",
            "                                                                                                  \n",
            " embedding_13 (Embedding)       (None, 1, 10)        60          ['Rating_in[0][0]']              \n",
            "                                                                                                  \n",
            " embedding_14 (Embedding)       (None, 1, 5)         1260        ['Review_Votes_in[0][0]']        \n",
            "                                                                                                  \n",
            " embedding_10 (Embedding)       (None, 30, 20)       81140       ['Product_Name_in[0][0]']        \n",
            "                                                                                                  \n",
            " embedding_11 (Embedding)       (None, 500, 50)      3662500     ['Reviews_in[0][0]']             \n",
            "                                                                                                  \n",
            " flatten_6 (Flatten)            (None, 10)           0           ['embedding_12[0][0]']           \n",
            "                                                                                                  \n",
            " flatten_7 (Flatten)            (None, 10)           0           ['embedding_13[0][0]']           \n",
            "                                                                                                  \n",
            " flatten_8 (Flatten)            (None, 5)            0           ['embedding_14[0][0]']           \n",
            "                                                                                                  \n",
            " gru_4 (GRU)                    (None, 8)            720         ['embedding_10[0][0]']           \n",
            "                                                                                                  \n",
            " gru_5 (GRU)                    (None, 16)           3264        ['embedding_11[0][0]']           \n",
            "                                                                                                  \n",
            " concatenate_2 (Concatenate)    (None, 49)           0           ['flatten_6[0][0]',              \n",
            "                                                                  'flatten_7[0][0]',              \n",
            "                                                                  'flatten_8[0][0]',              \n",
            "                                                                  'gru_4[0][0]',                  \n",
            "                                                                  'gru_5[0][0]']                  \n",
            "                                                                                                  \n",
            " dense_6 (Dense)                (None, 128)          6400        ['concatenate_2[0][0]']          \n",
            "                                                                                                  \n",
            " dropout_4 (Dropout)            (None, 128)          0           ['dense_6[0][0]']                \n",
            "                                                                                                  \n",
            " dense_7 (Dense)                (None, 64)           8256        ['dropout_4[0][0]']              \n",
            "                                                                                                  \n",
            " dropout_5 (Dropout)            (None, 64)           0           ['dense_7[0][0]']                \n",
            "                                                                                                  \n",
            " dense_8 (Dense)                (None, 1)            65          ['dropout_5[0][0]']              \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 3,767,505\n",
            "Trainable params: 3,767,505\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_model(model, show_shapes= True)"
      ],
      "metadata": {
        "id": "EiTEF4_5ejr5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "outputId": "5c0606a2-266c-461e-a28d-d383a6b7fefb"
      },
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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Nq1fv15btmxRVFSUS5Y5b9487du3Tx988IHCw8MlSZs2bVJSUpI6duyozZs3u2Q9AADvIhPLRiYCAPwFuV42ch0A4CrkruuQzwAQ+MhNzwvEfHVr8dX69etVt25dWSwWu1dYWJiqVKmiO++8Uxs2bHBnFxwydOhQxcTEyGKxaN++fU7N+/NtfPjhh4u06dKli2JiYhQaGqomTZpoz549ruq6233wwQeKi4vTe++95+2uSJJ27dqlW265RSEhIbJYLKpevbpmzpzp7W7Z+fkxUaNGDQ0cONDb3fJ7kydP1rJly3Tp0iXVqVNH69at83aX3OKVV16RMcb2WrFihd37s2bN0qhRo/T88897qYfO69y5s95++23VqFHDJcvbtGmTrl+/rm3btik+Pt42vVevXnaf3blz51yyPhRVUr5brVbVqVNHQ4YM0bfffuuSdflSDvlSXyQyMZiRiQXIRDLRXTyZc8XxtbwZNmyYoqOjZbFYFB4erhYtWui///2vXZvXX39dKSkptjx64403vNNZB/naZyyR68GMXC9ArgdPrheXs+Hh4UpKStJDDz1UJGNc7UauA7sT15g9i9wNXuRuAXLXccGSz+7GebZzfK2/5GbwIjcLkJuuF7D56sxDCvv06WP69Onj9MMN69WrZ+Li4mw/nz9/3mzdutU0atTISDKrVq1yepmutnLlSiPJ7N27t1zz16tXzyQkJBhJ5v333y/y/pYtW0zPnj1vtJse9/7775vY2Fjz7rvvumX55X1W7d13320kmQsXLrihV67x8+Pe35X3+x/MfOFZzHBcMO8vV+R7Xl6eOX36tHnrrbdMVFSUqVatmjl37twN983dOeRrfVE5nkVNJnpeMI8XN6I8xze8J9D2V3m2xxM5Vxxfyr5C+/fvN5LML3/5yxLbHD161NSsWdNkZ2d7sGfl44nPuLy/X5Hrnhdo450ncH3Av7h7f7nifDIzM9O8++67JiUlxVSsWNEcPHjQ1d20c6PXgd2Ja8zlx/m0f+B8unz4fSUw+fv3gfNs9yE3y4/chDHkZrDz4v5f45XHDsbHx6tz58764x//KElas2aNN7rhcgsXLlRISIiGDRvmV7edK023bt106dIlde/e3dtd8VlXr15Vu3btvN0NAPCqkJAQVatWTQ8//LCeeOIJnTlzRlu3bnVqGcWNp76UQ77UF19FJgII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Opd8T9yh8I+vcXFxGj16tLp27ap///vfSkpKKnU+R7PG1deBDxw4oIsXL+ruu++2m174x1934BqzbyB3OZ/29kvi95VAfAXr9ehAPs/mnLUAuUluevslkZvB/PKmMK+sNCxMSUlJGjx4sPLy8vTYY4/p+eef1x/+8IdS59u8ebPmzp2rtLQ0ZWRklCtMTpw4IUmqWrVquS6jOWIAACAASURBVPruKKvVqmXLlqlDhw4aMmSI5syZU6SNK7anOFeuXJEkTZkyRVOmTLF7LzEx0SXrCEQVKlQo991XblRZx4LFYtHw4cM1btw4/e1vf9Odd96pt956S2+//batjSf2e5s2bTR27FiXLCsY7Ny5UwsWLLA92xm+rXB/ofymTp2q5cuXa/LkyerZs6dq1apl9767cq8kXbt21dy5c7Vp0yZ16dJFaWlp2rhxo37zm9+4tfgqEJCJjmF8d07//v01ZswYtW3b1ttdgQOC9SJwaUrLOUfGnYoVK+r//b//p7lz5+rf//63fvGLX+jll18u84/ijiw7JiZG999/v9avX68lS5Zo5cqV+u1vf6tt27Zp9erVWrBggVauXHlDd70q9MQTT2jVqlVKTU1VmzZt9M4779hdULx48aJte3+uUqVKunz5crm3NTIyUp988okmTpyoWbNm6bnnnlO/fv20bNkyRUZG3vC2BSpyvWzkk3Pmz58vSVwf8BOF+8sXxcXF2XLDGY5mjauvA2dkZNjW4SlcY/Y/5K5jOJ92DufTgYnr0YF3ns05q/PITceQm84hN4ObN69re6X46qeaNWsmSfrPf/5Tartjx47pvvvu0/3336/XX39dNWvW1KJFi/T73//eqfVZrVZJ0vXr18vXYSe0bdtW48aN00svvaQZM2bY/Yexq7anOIUXFObPn68xY8bc8PKCQU5Oji5evKjk5GSPrG/79u364osvNHbsWIePhUGDBmny5Ml67bXXVKtWLcXGxuqmm26yve+J/Z6cnKx+/fq5ZdmBasGCBXxmfiTYT3ZvVExMjF544QUNGjRII0eO1HvvvWd7z525V5Lp06friy++0KBBg5SZmanExET169dPs2bNcts6AwGZ6DjGd+f0799fbdu25XPzExRfFVVazjk67owaNUoLFizQ/PnzNWLECNWqVUv16tUrdb2OLnvw4MFasWKF3nnnHa1cuVIbN25UnTp1tG7dOr3//vvauHGjPv74Y2c2uVjt27dXy5Yt9d577+n5559Xz549FRcXZ3u/8A/SxRVZlZUvjmxrkyZN9N577+ns2bOaN2+eXnjhBTVp0kRTp069kc0KWOS6Y8gn56xdu1YSvwv5i8L9FUgczRpXXweuWbOmJJXrCQ43gmvM/oPcdRwZ4hzOpwNXsF+PDsTzbM5ZHUduOo7x3znkZnDz5nVtjz12sCRffPGFJKlhw4altvvyyy+Vk5OjkSNHqm7durJareW6bVjTpk0VEhKif/zjH+Xqr7NmzJihRo0aae/evXbTXbU9xalVq5asVqv27dvnkuUFg23btskYozZt2timhYWFue2uLF988YWio6MlOX4sxMfHq3///tq4caNeeuklPfbYY3bvs98B+IJHHnlEv/zlL/X+++9rzZo1tunuzL2SpKWl6ciRIzp79qxycnJ07NgxpaamKj4+3q3r9XdkIgCUrKScc3TcKfxnhnXr1mnq1KkOXZhzdNl33HGHbrrpJs2cOVPVqlVTQkKC7r77biUmJmratGmqU6dOqY9dcMbjjz+uvLw8vfDCCxo5cqTde02bNlXFihX1+eef203fvXu3srOzdfvtt5e43LK29dSpU7Z/3Kpataqef/553XbbbWX+M1cwI9cBBCJHs8aZ68COjI21a9dW5cqV9dFHH5W/8+XENWb/QO4CgPMC6Tybc1bnkJsAAo1Hi6+uXr2q/Px8GWN06tQpLVu2TFOmTFGVKlXKvFV54X/0bN26VdeuXVN6erp2797tdB+qVq2q3r17a926dVq6dKkyMjJ04MABvfrqq+XaprIU3hr65483ctX2lLTOwYMHa+XKlUpNTVVGRoby8vJ04sQJff/99y5Zh7/Lz8/XhQsXlJubqwMHDmjMmDFKSUnRoEGDbG3q16+v8+fPa+PGjcrJydHZs2f13XffFVlW5cqVderUKR09elSXL18u9ZeCnJwcnT59Wtu2bbMFvDPHwogRI3T9+nW9//776t69u9177HcAvsBisWjhwoWyWCwaNWqULly4IMmxsc6Z8dQRTzzxhFJSUpSZmXlDywl0ZCIAOK6knHNm3Bk/frxyc3N14cIF/frXvy5znY4u22Kx6NFHH9XBgwf16KOPSpJCQ0P18MMPKy0tTQ8//LDLPocHH3xQlStXVvv27dW8efMi/R0/frw2bNigFStWKCMjQ19++aVGjBihxMREDRs2zNb257kRGhpa6raeOnVKw4cP18GDB5Wdna29e/fqu+++s7tQG+zIdQDBwNGsceY6sCNjY4UKFTR58mRt375do0aN0smTJ5Wfn6/Lly/b/qjq6vPan24z15h9D7kLADcukM6zOWctHbkJIOAZJ/Tp08f06dPH4fYbNmww9erVM5KKvCpUqGBuvvlmM3LkSHPs2DHbPHPmzDGRkZFGkqlVq5ZZvny57b0JEyaYypUrm0qVKpm+ffuaxYsXG0mmXr16ZuLEiSYqKspIMjfffLM5cuSIefXVV01sbKyRZG666Sbz9ddfG2OMuXz5shk6dKhJSEgwFStWNB06dDDPPPOMkWSSk5PN/v37y7WNVapUMU888USx7Z566inTs2dPu2mlbc/48eNt21O7dm3z6aefmhdeeMHExcUZSaZ69erm7bffNqtWrTLVq1c3kkx8fLxZuXKlMcaY69evmwkTJpiUlBQTFhZmqlatanr37m3S0tIc3rZFixaZGjVqGEkmKirK9OjRwyxZssThz9kRq1evNs4chrt27TJNmjQxISEhRpKpUaOGmTVrllP9GjZsmAkPDzdJSUkmLCzMxMbGml69epkjR47YrevHH380d9xxh7FaraZOnTrmd7/7nXnqqaeMJFO/fn3bcbtnzx5z0003mcjISNOhQwfz8ssvl3jc//S1YcMG27pKOxZ++v0wxpiWLVuaSZMmFfv5lLbfS/tuOcLZ7z+cP77hXcG8v5z9fv/zn/80DRo0sI1nNWvWNMOHD7drM2jQICPJVKpUyTz//PPGmLLHup+Pp1OmTLmhHPrkk09MQkKC3dgbHh5ubrnlFrN+/XqnPiNPZKIxxkgyq1evdqgtmei9TAzm8eJGOHN8w/sCbX85sz3lzTlnzsHuuOMO89prrxWZXlzeOLPsb775xlSrVs1kZ2fbpv33v/811apVMzk5OQ5tv6Oeeuop85e//KXY9/Lz883cuXPNzTffbMLDw018fLy57777zKFDh+za/Tw3fvjhh1K39ejRo6Zdu3YmPj7ehIaGmpo1a5qnn37a5ObmOtxvT2W6s79fkevey/VAG+88gesD/sXd++tGzycTExNN3759i21b2vfb0axx9Dqwo2OjMcYsXrzYNGvWzFitVmO1Wk3Lli3NkiVLjDHFZ5sjuMbM+XSw5C7n0+XD7yuByd+/D5xnFz3P9qdzVnKT3Axk5GZw8+L+X2P5/zvgkL59+0qS1q5d6+gsQKnWrFmj/v37y4nD8IYNHz5ca9eu1Y8//uixdbpSt27dtHjxYtWpU8ej6+X77zxvHN8ov2DeX4H6/U5NTVV6errmz59vm5adna2JEycqNTVVFy5cUGRkpBd7WJTFYtHq1as99ixyMrF8gnm8uBGePr5xYwJtfwXa9sD3eeP3K3K9fBgfnBeo5w+Byt37i+MBvoLzaedwPu1f+H0lMPn794Hj0r+Rm84hN/0L41Nw8+L+Xxvm6TUCviAvL8/bXXBYTk6OwsPDJUkHDhyQ1Wr1eLgDgL/54YcfNGrUqCLPWo+IiFBKSopycnKUk5Pjc8VX3kAmAgAQOMh1AAA8h9wFAMBx5CaAQBfi7Q74ooMHD8pisZT5GjBggLe76rRA3rZANWHCBKWnp+vrr7/W4MGDNWPGDG93CW40fPhwu+/iwIEDi7TZunWrJk2apPXr16tu3bq2tj9/vrgkdenSRTExMQoNDVWTJk20Z88eT2zGDcvPz9f8+fPVrl27Iu+9++67mjNnTpFf1Ddu3Gj32VWpUsVT3YUPioyMVHh4uJYuXarTp08rJydHp06d0muvvaZnnnlGAwYM0KlTp8hEP0MmBhcysQCZCHcItPPCQNueYEGuBxdyvQC5HlwCOZ8CedsCFbkbXII9d+fMmaNGjRopMjJS0dHRatSokaZOnaqMjIwibXfs2KH27dsrKipKiYmJmjBhgq5fv257n3yGK5Cb/ofcDC7BnpszZ84sdkxq2rRpkbZl5aaj7QI1Xym+KkajRo1kjCnztWrVKm931WmBvG2OmDx5spYtW6ZLly6pTp06Wrdunbe7VKaoqCg1atRId955p6ZPn67GjRt7u0tws8qVK2vLli06dOiQli5davfetGnTtHDhQk2ePFm9e/fWN998o3r16ikhIUErVqzQ5s2b7dp/9NFHWrt2rbp37660tDTddtttntyUcklPT9evfvUrjRs3TllZWUXe79Gjh6xWqzp37qyLFy/apvfs2VMnTpzQ9u3b1bVrV092GT4oLi5OH330kb766is1aNBAkZGRaty4sZYtW6YXXnhBb775JplIJsIPkIlkItwj0DIw0LanPMh1+ANynVwPNoGcT4G8bY4gd+EPgjl3P/30Uz322GM6duyYTp8+rRkzZmjOnDnq06ePXbu0tDR16dJFnTt31tmzZ7Vhwwa9/vrrGjFihK0N+QxXIDfJTfi+YM5NRzmSm462C9R8pfgKQWX27Nm6fv26jDH69ttvi/yy7YtmzpypvLw8HTt2TN27d/d2d7zq6tWrxf53qL+toyyRkZG655571KBBA1WoUME2/YUXXtCqVau0Zs0axcTE2M2zcOFChYSEaNiwYbp06ZKnu+wy+/fv18SJEzVixAjdeuutJbYbPXq0WrRooa5duyo3N1dSwTN8k5KS1LFjR918882e6jJ8WMeOHfXxxx/r0qVLys3N1cWLF/XPf/5TI0eOVFgYT14mE/0bmUgmFiITAUjkuj8LlkyXyHVyHQgc5K5/C5bsDebcjYiI0OOPP66qVauqYsWK6tu3r3r16qWPP/5Y33//va3djBkzVKNGDT377LOKjo5W27ZtNWHCBL3xxhs6ePCgrR35DNwYctO/kZuBn5uStHz58iIFoV999ZVdG0dzM5jzleIrAH5j6dKlOnPmjN+vozwOHz6sqVOn6tlnn5XVai3yfrt27TRmzBidPHlSTz75pBd66BotWrTQ+vXr9dBDD9n9clOc6dOna9++fVqwYIGHegcAvoNMJBN/ikwEAP8VzJkukevFIdcBwL2COXuDJXc3bNhQZPuSkpIkSZmZmZKk3Nxcbd68WZ06dZLFYrG1u/fee2WM0aZNm+zmJ58BBCtyM/Bz0xGO5maw5yvFVwDcxhijefPm6ZZbblGFChUUHx+vXr162VW1jho1ShEREapRo4Zt2uOPP67o6GhZLBadO3dOkjRmzBiNHz9eR44ckcViUf369bVw4UJZrVZVq1ZNw4cPV2JioqxWq9q1a6fdu3e7ZB2S9Ne//lWxsbGaNWuWWz+v0ixcuFDGGPXo0aPENjNnzlSDBg302muvaevWraUuz5F9k5qaqujoaEVFRWnTpk269957FRsbq+TkZK1cudJueXl5eXrmmWeUkpKiyMhINW/eXKtXr76xjS5DfHy8OnXqpAULFsgY49Z1AcCNIhNdh0wsikwEAM8h012LXC+KXAcAe2Sv6wRz7qanp6tSpUq66aabJEnffPONMjMzlZKSYteuXr16kqQDBw7YTSefAfgLctN1gjk3f87R3Az2fKX4CoDbTJ8+XZMmTdLTTz+tM2fOaPv27Tp+/Lg6duyo06dPSyoIrn79+tnNt2TJEj377LN20xYsWKDu3burXr16Msbo8OHDGjVqlAYNGqSsrCyNHj1aR48e1Z49e5Sbm6u77rpLx48fv+F1SAXhJUn5+fmu+3CctHnzZjVs2FBRUVEltomMjNQbb7yhkJAQPfbYY7py5UqJbR3ZNyNHjtTYsWN19epVxcTEaPXq1Tpy5Ijq1q2rxx57TDk5ObblTZw4US+++KLmz5+v77//Xt27d9eDDz6ozz//3HUfQjFatmypkydPav/+/W5dDwDcKDLRdcjE4pGJAOAZZLprkevFI9cB4H/IXtcJttzNycnRyZMntXjxYm3dulWLFi1SRESEJOmHH36QpCKPkLJarYqMjLT1/6fIZwD+gNx0nWDKzUmTJik+Pl4RERGqU6eOevXqpc8++8z2vqO5Gez5SvEVALe4evWq5s2bp/vvv18DBw5UXFycmjVrpldeeUXnzp3Tq6++6rJ1hYWF2aqEGzdurNTUVF2+fFnLli1zyfK7deumjIwMTZ061SXLc9aVK1f07bff2qqCS9O2bVuNHTtWR48e1cSJE4ttU559065dO8XGxqpq1aoaMGCArly5omPHjkmSrl27ptTUVN13333q3bu3KlWqpClTpig8PNxl+6Akhc/7/fLLL926HgC4EWSi65CJJSMTAcD9yHTXItdLRq4DQAGy13WCMXdr1aql5ORkTZ8+XS+++KL69+9ve+/69euSpNDQ0CLzhYeH6+rVq0Wmk88AfB256TrBlJuPPvqo3n33XR0/flyZmZlauXKljh07pk6dOiktLU2S47kZ7PlK8RUAt0hLS1NmZqZatWplN71169aKiIiwu/Wkq7Vq1UpRUVF2t2n0Z2fOnJExptTK6p+aOXOmGjZsqCVLlmjHjh1F3r/RfVP430GF1dWHDh1SVlaWmjZtamsTGRmpGjVquH0fFH4mxVVKA4CvIBNdh0wsGZkIAO5HprsWuV4ych0ACpC9rhOMuXv8+HGdOXNGf/nLX/Tmm2+qZcuWOnPmjKSCO3BIUm5ubpH5srOzFRkZWWQ6+QzA15GbrhNMuVmrVi21bNlSFStWVEREhNq0aaNly5bp6tWrWrJkiSTHczPY85XiKwBucfHiRUlSxYoVi7xXqVIlXb582a3rr1Chgs6ePevWdXjKtWvXJBVskyOsVquWLVsmi8WiIUOGFKkidvW+KbyF5pQpU2SxWGyv7777TllZWU4ty1mFIV34GQGALyITXYdMLBmZCADuR6a7FrleMnIdAAqQva4TjLkbHh6uqlWrqkuXLlq1apXS0tI0e/ZsSVKNGjUkSRkZGXbzZGVl6dq1a0pMTCyyPPIZgK8jN10nGHPzp5o1a6bQ0FB9/fXXkhzPzWDPV4qvALhFpUqVJKnYsLh48aKSk5Pdtu6cnBy3r8OTCkOn8PnGjmjbtq3GjRun9PR0zZgxw+49V++bqlWrSpLmz58vY4zda+fOnU4ty1nZ2dmSVGylNAD4CjLRdcjEkpGJAOB+ZLprkeslI9cBoADZ6zrBnrv169dXaGio7fFJderUUUxMjL777ju7docPH5YkNW/evMgyyGcAvo7cdJ1gz838/Hzl5+fbis8czc1gz1eKrwC4RdOmTVWxYkV9/vnndtN3796t7Oxs3X777bZpYWFhttskusK2bdtkjFGbNm3ctg5PqlatmiwWiy5duuTUfDNmzFCjRo20d+9eu+nO7BtH1KpVS1arVfv27XNqPlco/EyqV6/u8XUDgKPIRNchE0tGJgKA+5HprkWul4xcB4ACZK/rBEvu/vjjj3rwwQeLTE9PT1deXp5q1aolqWBfdu3aVdu3b1d+fr6t3ZYtW2SxWNSjR48iyyCfAfg6ctN1giU3Jenuu+8uMu2zzz6TMUZt27aV5HhuBnu+UnwFwC2sVqvGjx+vDRs2aMWKFcrIyNCXX36pESNGKDExUcOGDbO1rV+/vs6fP6+NGzcqJydHZ8+eLVIRK0mVK1fWqVOndPToUV2+fNkW2Pn5+bpw4YJyc3N14MABjRkzRikpKRo0aJBL1rFlyxbFxsZq1qxZrv+gHBAVFaW6devqxIkTTs1XeIvL0NDQItMd3TeOrmfw4MFauXKlUlNTlZGRoby8PJ04cULff/+9JGnAgAGqXr269uzZ49Syy1L4mTRr1sylywUAVyITXYdMLBmZCADuR6a7FrleMnIdAAqQva4TLLkbHR2tjz76SJ988okyMjKUk5OjvXv36tFHH1V0dLTGjRtnazt16lSdPn1a06ZN05UrV7Rz507NnTtXgwYNUsOGDYssm3wG4OvITdcJltyUpJMnT2rVqlW6ePGicnJytHPnTg0dOlQpKSkaMWKErZ2juRnM+UrxFQC3mTZtmmbPnq3nnntOVapUUadOnVS7dm1t27ZN0dHRtnYjR47UHXfcoQceeEANGzbUjBkzbLcWbNu2rY4fPy5JGjFihKpVq6bGjRura9euOn/+vKSCZ8A2a9ZMkZGR6tixoxo0aKC///3vds/hvdF1eFu3bt2UlpZm94zgd955R/Xr19eRI0fUunVr/e53vysyX5s2bexOKAs5sm9SU1M1f/58SQW3gfzmm2/05z//WePHj5ck3XPPPUpPT5ckLViwQGPHjtWcOXOUkJCgxMREjRkzRhcuXJBUcMvIM2fOaNOmTaVu565du9ShQwfVrFlTu3fv1v79+5WYmKj27dtr+/btRdp/9tlnSkpKKvY2lQDgS8hE1yETyUQA8CYy3bXIdXIdAMpC9rpOMOSu1WpV+/btNXToUCUlJSkmJkZ9+/ZV7dq1tWvXLjVt2tTWtkmTJvrwww/10UcfKSEhQb1799aQIUP08ssvF7ts8hmAPyA3XScYcrNwmVOmTFFycrKioqLUr18/tW/fXrt27VJCQoKtnaO5GdT5apzQp08f06dPH2dmAUq1evVq4+RhCC/x1e//sGHDTOXKlb3djWKV5/geNmyYSUpKKjI9PT3dhIWFmeXLl7uqex6Vl5dnOnbsaJYuXeqyZZ47d85YrVbz0ksvFXlv9OjRJiEhwanlBfN45Kvf72Akyaxevdrb3UAZfHW88OVMNMb545tMdJyrM9GYwBuPAm174Pv4/cp/+OL44OuZXp7jm1x3nKtz3d3jEeMdfIUvjucoivPp8uF8uoA7ctdR7jjv9tXvg6MYd/0b+88/+Oo4QW76B2/mpqMC7Lr2Gu58BcDv5eXlebsLLnX16lV9+OGHSk9PV3Z2tqSCW3M+99xzeu6555SZmenlHjonLy9PGzdu1OXLlzVgwACXLXf69Om69dZbNWrUKEmSMUanTp3Sjh07dPjwYZetBwD8CZno28hEAICjAi3TJXLdUeQ6AHhHoGUvueta5DMA2CM3fZu3c9NRgZavFF8BgI85f/687rnnHjVo0EBDhgyxTZ80aZL69u2rAQMG6NKlS17soXO2bdum9evXa8uWLYqKinLJMufNm6d9+/bpgw8+UHh4uCRp06ZNSkpKUseOHbV582aXrAcA4F1kYtnIRACAvyDXy0auAwBchdx1HfIZAAIfuel5gZivFF8B8FuTJ0/WsmXLdOnSJdWpU0fr1q3zdpdu2CuvvCJjjO21YsUKu/dnzZqlUaNG6fnnn/dSD53XuXNnvf3226pRo4ZLlrdp0yZdv35d27ZtU3x8vG16r1697D67c+fOuWR9AOAPyET/QCYCAMoSiJkukeuOINcBwDsCMXvJXdchnwHAHrnpH7yVm44K1HwN83YHAKC8Zs+erdmzZ3u7Gx7XpUsXdenSxdvd8JqePXuqZ8+e3u4GAPgUMjE4kYkAEHiCNdMlcp1cBwDvCNbsDfbcdRT5DAD2yE24QqDmK3e+AgAAAAAAAAAAAAAAAIByoPgKAAAAAAAAAAAAAAAAAMqB4isAAAAAAAAAAAAAAAAAKAeKrwAAAAAAAAAAAAAAAACgHMKcneHEiRNas2aNO/qCILRz505J4pjyAydOnJDEvnIGx7d/KdxfwYp89x3Bfiz6A8b38uP4hjdx/MGTOH/yL4wPzuH49i8nTpxQcnKy29fB8QBfwHju+zifLj+O78ATCPs0ELYhmLH/fB+5WX4c3/AGizHGONq4b9++WrdunTv7AwCAVzkRiwGDfAcAFGf16tXq16+ft7vhEhaLxdtdAADAa/r06aO1a9e6ZdmcTwIAcGP89Xo059kAAF/lpevaa50qvgLgWRaLJaD+6AUAgC9bs2aN+vfv77cXvQAA8FUVK1bUokWLNHjwYG93BQCAoPH6669r9OjRunz5sre7AgAASsHfg4GAsDbE2z0AAAAAAABA4AoNDVVeXp63uwEAQFDJy8tTaGiot7sBAAAABAWKrwAAAAAAAOA2FF8BAOB5FF8BAAAAnkPxFQAAAAAAANyG4isAADyP4isAAADAcyi+AgAAAAAAgNuEhoYqNzfX290AACCo5ObmUnwFAAAAeAjFVwAAAAAAAHCbsLAw7nwFAICH5eXlKSwszNvdAAAAAIICxVcAAAAAAABwGx47CACA5/HYQQAAAMBzKL4CAAAAAACA21B8BQCA51F8BQAAAHgOxVcAAAAAAABwG4qvAADwPIqvAAAAAM+h+AoAAAAAAABuQ/EVAACeR/EVAAAA4DkUXwEAAAAAAMBtKL4CAMDzKL4CAAAAPIfiKwAAAAAAALgNxVcAAHgexVcAAACA51B8BQAAAAAAALeh+AoAAM+j+AoAAADwHIqvAAAAAAAA4DYUXwEA4HkUXwEAAACeQ/EVAAAAAAAA3IbiKwAAPI/iKwAAAMBzKL4CAAAAAACA21B8BQCA51F8BQAAAHgOxVcAAAAAAABwG4qvAADwPIqvAAAAAM+h+AoAAAAAAABuExYWptzcXG93AwCAoJKbm6uwsDBvdwMAAAAIChRfAQAAAAAAwG248xUAAJ7Hna8AAAAAz6H4CgAAAAAAAG5D8RUAAJ5H8RUAAADgORRfAQAAAAAAwG0ovgIAwPMovgIAAAA8h+IrAAAAAAAAuA3FVwAAeB7FVwAAAIDnUHwFAAAAAAAAt6H4CgAAz6P4CgAAAPAciq8AAAAAAADgNhRfAQDgeRRfAQAAAJ5D8RUAAAAAAADchuIrAAA8j+IrC2bcvgAAIABJREFUAAAAwHMovgIAAAAAAIDbUHwFAIDnUXwFAAAAeA7FVwAAAAAAAHAbiq8AAPA8iq8AAAAAz6H4CgAAAAAAAG5D8RUAAJ5H8RUAAADgORRfAQAAAAAAwG0ovgIAwPMovgIAAAA8h+IrAAAAAAAAuE1YWJhyc3O93Q0AAIJKbm6uwsLCvN0NAAAAIChQfAUAAAAAAAC34c5XAAB4Hne+AgAAADyH4isAAAAAAAC4DcVXAAB4HsVXAAAAgOdQfAUAAAAAAAC3ofgKAADPo/gKAAAA8ByKrwAAAAAAAOA2FF8BAOB5FF8BAAAAnmMxxhhvdwKANGzYMB06dMhu2p49e1SnTh3Fx8fbpoWGhurNN99UcnKyp7sIAEDAOHHihB599FG7PwRfuHBB3377rW677Ta7tg0bNtSf/vQnT3cRAAC/tH37di1evNhu2t69e3X58mU1atTINu369ev6zW9+o6efftrTXQQAIODMmjVL77//vipUqGCbdvDgQcXExKhly5Z2bZ944gn96le/8nQXAQCA+HswEMDWhnm7BwAKVK9eXa+++mqR6QcOHLD7uW7dugQtAAA3KDk5Wd99952OHDlS5L1//OMfdj9zURoAAMfdcsst2rBhQ7F3ujp9+rTdzxReAQDgGi1atNCUKVOKTD99+rQOHz5s+zk0NFRLlizxZNcAAMBP8PdgIHDx2EHARzz44INltomIiNCgQYPc3xkAAILAI488ovDw8DLbDRgwwAO9AQAgMFStWlVdunRRWFjp/+9XsWJF3XXXXR7qFQAAga1Lly6KiYkptU1oaKi6dOmiqlWreqhXAADg5/h7MBC4KL4CfESjRo3UpEkTWSyWEttkZ2erf//+HuwVAACB66GHHlJubm6pbZo0aaLGjRt7qEcAAASGQYMGFXvnq0Lh4eHq3bu33aORAABA+UVEROi+++4r9R+M8vPzNXjwYA/2CgAA/Bx/DwYCF8VXgA955JFHFBoaWux7FotFLVq0UIMGDTzcKwAAAlO9evXUvHnzEk90w8PD9eijj3q4VwAA+L8ePXooOjq6xPdzcnK4kAwAgIv1799fOTk5Jb4fGRmp3/zmNx7sEQAAKA5/DwYCE8VXgA954IEHSvzv4NDQUP4ADACAi5V2opubm6u+fft6uEcAAPg/q9Wqfv36lXj3jZiYGHXu3NnDvQIAILDdddddJT56MDw8XA888IAiIyM93CsAAPBz/D0YCEwUXwE+pFatWmrTpo1CQop+NfPy8tSvXz8v9AoAgMD1wAMPKD8/v8j0kJAQtWnTRrVr1/Z8pwAACACPPPJIsXffCA8PV9++fRUREeGFXgEAELjCw8PVp0+fYoufc3Jy9Mgjj3ihVwAA4Of4ezAQmCi+AnzMww8/XOTxRyEhIerQoYOSkpK81CsAAAJTYmKi2rdvX+RENyQkhAvTAADcgF/96lfFnsPm5ORwIRkAADfp169fscXPNWvWVIcOHbzQIwAAUBz+HgwEHoqvAB9T3OONLBYLfwAGAMBNHn744SLTjDH/H3t3Hh9Vdf9//D1kXwEhkAgEQ9hUVrcCLhSpWLWGLUBELIgi4oLIIiL7qoBfwIXUoogKGMKSghWxaCkoFakWEMSqAUUWERCFAAmQ5fz+4JdISAgzk5m5s7yej8f8wZ0z534y98x5z71zmFG3bt0sqAYAAP9gs9nUt2/fMt++UbVqVd16660WVQUAgH/7wx/+oGrVqpXaFhISovvvv7/cb9cAAADW4PNgwP/wbhvwMjVr1lTHjh0VFBRUss1ms6lr164WVgUAgP9KTU0tlbtBQUH6wx/+oFq1allYFQAAvq9v376lvn2j+CcHy/s5JAAAUHnBwcHq3r17qazNz89Xnz59LKwKAABciM+DAf/D4ivAC/Xp00fGGEnnPgC+/fbbVaNGDYurAgDAP1WvXl233XZbyYmuMYYL0wAAuEDjxo3VqlWrkp9S4CcHAQBwv/N/etBms6lVq1Zq2rSpxVUBAIAL8Xkw4F9YfAV4oW7duik0NFQSHwADAOAJffr0UVFRkaRz38rRpUsXiysCAMA/9O/fv2SBc9WqVdWhQweLKwIAwL/deuutql69uqRzH+Q+8MADFlcEAADKw+fBgH9h8RXghaKiovSnP/1JkhQaGqq7777b4ooAAPBvKSkpCgsLkyTdfffdio6OtrgiAAD8Q1pamowxstls6tWrl4KDg60uCQAAvxYcHKwePXrIZrPJGKNevXpZXRIAACgHnwcD/oXFV4CXuvfeeyVJXbt2VVRUlMXVAADg36Kiokq+7Yr/YQQAgOvExcWpU6dOfPgLAIAH9ezZU8YYderUSXFxcVaXAwAALoLPgwH/YTPFPyT6/y1dupSLYQAAXCA1NVXLli1zS989evTQ8uXL3dI3AAC+KjMzUz179nRL3zabzS39AgDgbdyZp1xHBgDAeRd8POtSXG8GAMC9ysnxZRf9rvfMzEz3VgOfN3v2bEnSk08+aXEl/mvRokVKS0tzy88ycPwct2nTJs2ZM4f5MQAVv17cqU2bNrwecUm9evXSkCFD1LZtW6tL8UuFhYXKzMxU79693dI/x89xvF8JXJ74IJfXIy6F9/+uk5+fr+XLl+uee+7x2D45fs7h/Yp/8dTCKF5nuBTe11vj7bffVmpqqkJDQyvVD8fPcbwPQUWKx4e7cb0ZFWGe8i6Ofh7M8XMO57twhYpy/KKvYHf9jyj4j+JvgGGsuE9KSorCw8Pd0jfHzzlz5szhOQtA7vrGq/PVrVuXsYVL6tWrl9q2bctYcaOuXbu6LXs5fo7j/Urg8sSHxbweYQ/e/7tO9+7d3ZaxF8PxcxzvV/yLpxZfMV5wKbyvt4arri1z/JzD+xBUxBOLr7jejEthnvIezmQ2x89xnO/CVS6W41U8XAcAB3j6wjQAAIGO7AUAwD3IWAAAPIvsBQDAN5DZgH9g8RUAAAAAAAAAAAAAAAAAOIHFVwAAAAAAAAAAAAAAAADgBBZfAQAAAAAAAAAAAAAAAIATWHwFAAAAAAAAAAAAAAAAAE5g8RWASnnvvfdUtWpV/f3vf7e6FL/24YcfatSoUVqxYoUaNGggm80mm82m++67r0zbTp06KSYmRkFBQbr66qu1ZcsWCyp2XFFRkWbPnq127dqVue+dd97R9OnTVVhYaEFlAOBdyF7PIHvJXgCQyF13IGPJWACBiUz1DH/O2enTp6tp06aKiIhQVFSUmjZtqrFjxyonJ6dM240bN+rGG29UZGSkEhISNHLkSJ05c6bkfvIYAMhmT/LnfJ4yZUrJ33P+rVmzZmXaXiqf7W3nrTnO4isAlWKMsboEvzd+/Hi9+OKLeuaZZ9S9e3d99913Sk5OVo0aNbRo0SKtXr26VPu1a9dq2bJluvvuu7Vz505dc801FlVuv+zsbN1yyy0aOnSocnNzy9yfkpKi8PBwdezYUceOHbOgQgDwHmSv+5G9ZC8AFCN3XYuMJWMBBC4y1f38PWc//vhjDRgwQHv37tWhQ4c0efJkTZ8+XampqaXa7dy5U506dVLHjh115MgRZWVl6fXXX9egQYNK2pDHAEA2e4q/57O97Mlne9t5a46z+ApApdx11106fvy47r77bqtLUV5eXrn/q9SXPffcc1qyZImWLl2qmJiYUve9+OKLqlKligYOHKjjx49bVGHlffHFF3r66ac1aNAgtWrV6qLtnnjiCbVs2VJ33nmnCgoKPFghAHgXste9yN7fkL0AQO66Ehn7GzIWQCAiU90rEHI2NDRUjz76qOLi4hQdHa0ePXqoS5cu+uCDD3Tw4MGSdpMnT1Z8fLwmTpyoqKgotW3bViNHjtQbb7yhr7/+uqQdeQwg0JHN7hcI+SxJCxculDGm1O3LL78s1cbefPblHGfxFQC/MX/+fB0+fNjqMlxm165dGjt2rCZOnKjw8PAy97dr105DhgzRgQMHNHz4cAsqdI2WLVtqxYoVuvfeexUWFlZh2wkTJmjbtm2aM2eOh6oDAFSE7PVNZC8A+CZfzl0ytiwyFgCs48uZWp5AydmsrKwyf1+dOnUkSSdPnpQkFRQUaPXq1Wrfvr1sNltJuzvuuEPGGK1atarU48ljAPAO/pbNUuDksz3szWdfz3EWXwFw2saNG5WYmCibzaaXX35ZkpSenq6oqChFRkZq1apVuuOOOxQbG6u6desqIyOj5LEvvviiwsPDVatWLT388MNKSEhQeHi42rVrp82bN5e0Gzx4sEJDQxUfH1+y7dFHH1VUVJRsNpt+/vlnSdKQIUM0bNgw7d69WzabTQ0bNpQkvf/++4qNjdXUqVM98ZS41IsvvihjjFJSUi7aZsqUKWrcuLFee+01ffjhhxX2Z4zRrFmzdOWVVyosLEzVq1dXly5dSq0Stvf4SVJhYaHGjRunxMRERUREqEWLFsrMzKzcH30J1atXV/v27TVnzhy+DhVAQCJ73YvsLYvsBRDIyF3XIWPLImMBBBIy1b0COWezs7NVrVo11a9fX5L03Xff6eTJk0pMTCzVLjk5WZK0ffv2UtvJYwCBimx2v0DO5wvZm8++nuMsvgLgtJtuukmffPJJqW2PPPKInnzySeXl5SkmJkaZmZnavXu3GjRooAEDBig/P1/SucDt16+fcnNz9cQTT2jPnj3asmWLCgoKdNttt2nfvn2SzgVTz549S+1j7ty5mjhxYqltc+bM0d13363k5GQZY7Rr1y5J54JDkoqKitzyHLjT6tWr1aRJE0VGRl60TUREhN544w1VqVJFAwYM0KlTpy7adsKECRo1apRGjx6tw4cP66OPPtK+fft0880369ChQ5LsP36S9PTTT2vGjBmaPXu2Dh48qLvvvlu9e/fW559/7ronoRytW7fWgQMH9MUXX7h1PwDgjche9yJ7y0f2AghU5K7rkLHlI2MBBAoy1b0CLWfz8/N14MABvfzyy/rwww/10ksvKTQ0VJL0008/SVKZn3YKDw9XRERESf3nI48BBCKy2f0CKZ9HjRql6tWrKzQ0VElJSerSpYs+++yzkvvtzWdfz3EWXwFwm3bt2ik2NlZxcXFKS0vTqVOntHfv3lJtgoODS1boXnXVVUpPT9eJEye0YMECl9Rw1113KScnR2PHjnVJf55y6tQpff/99yUreSvStm1bPfnkk9qzZ4+efvrpctvk5eVp1qxZ6tatm/r06aOqVauqefPmeuWVV/Tzzz9r3rx5ZR5T0fE7ffq00tPT1bVrV3Xv3l3VqlXTmDFjFBIS4rJjdzGNGjWSJO3YscOt+wEAX0T2Oo/svTiyFwDKR+7ah4y9ODIWAM4hU50XiDlbr1491a1bVxMmTNCMGTPUq1evkvvOnDkjSQoKCirzuJCQEOXl5ZXZTh4DQFlkc+UEUj737dtX77zzjvbt26eTJ08qIyNDe/fuVfv27bVz505J9uezr+c4i68AeETx/zw5f0Vtea677jpFRkaW+orEQHT48GEZYypcDX2+KVOmqEmTJpo7d642btxY5v6dO3fq5MmTuu6660ptv/766xUaGlrqa0DLc+Hx++abb5Sbm6tmzZqVtImIiFB8fLzbj13xc1Le6mYAwG/IXseQvRdH9gLApZG7F0fGXhwZCwBlkamOCcSc3bdvnw4fPqy3335bb775plq3bq3Dhw9LOvfNGJJUUFBQ5nFnz55VREREme3kMQBUjGx2XCDlc7169dS6dWtFR0crNDRUbdq00YIFC5SXl6e5c+dKsj+ffT3HWXwFwOuEhYXpyJEjVpdhqdOnT0s691zYIzw8XAsWLJDNZlP//v3LrPw9duyYJCk6OrrMY6tVq6YTJ044VF/x116OGTNGNput5PbDDz8oNzfXob4cVRysxc8RAKDyyF6ytyJkLwC4VqDlLhl7cWQsAFROoGVqeQIxZ0NCQhQXF6dOnTppyZIl2rlzp6ZNmyZJio+PlyTl5OSUekxubq5Onz6thISEMv2RxwDgOmTzOYGYz+dr3ry5goKC9O2330qyP599PcdZfAXAq+Tn5+vYsWOqW7eu1aVYqjgoin/P2B5t27bV0KFDlZ2drcmTJ5e6r1q1apJUbvg683zHxcVJkmbPni1jTKnbpk2bHOrLUWfPnpWkclc3AwAcR/aeQ/ZeHNkLAK4TiLlLxl4cGQsAzgvETC1PoOdsw4YNFRQUVPKzRklJSYqJidEPP/xQqt2uXbskSS1atCjTB3kMAK5BNv8m0PO5qKhIRUVFJYvP7M1nX89xFl8B8Crr16+XMUZt2rQp2RYcHHzJr7L0N7Vq1ZLNZtPx48cdetzkyZPVtGlTbd26tdT2Zs2aKTo6Wp9//nmp7Zs3b9bZs2d17bXXOrSfevXqKTw8XNu2bXPoca5Q/JzUrl3b4/sGAH9E9p5D9l4c2QsArhOIuUvGXhwZCwDOC8RMLU+g5OzRo0fVu3fvMtuzs7NVWFioevXqSTo3Bu6880599NFHKioqKmm3Zs0a2Ww2paSklOmDPAYA1yCbfxMo+SxJt99+e5ltn332mYwxatu2rST789nXc5zFVwAsVVRUpF9//VUFBQXavn27hgwZosTERPXr16+kTcOGDfXLL79o5cqVys/P15EjR8qseJWkyy67TD/++KP27NmjEydOKD8/X2vWrFFsbKymTp3qwb+q8iIjI9WgQQPt37/foccVfy1lUFBQme3Dhg1TVlaWFi1apJycHO3YsUODBg1SQkKCBg4c6PB+7r//fmVkZCg9PV05OTkqLCzU/v37dfDgQUlSWlqaateurS1btjjU96UUPyfNmzd3ab8AECjI3vKRvRdH9gKA88hdMrYiZCwA2I9MLV+g5GxUVJTWrl2rdevWKScnR/n5+dq6dav69u2rqKgoDR06tKTt2LFjdejQIY0fP16nTp3Spk2bNHPmTPXr109NmjQp0zd5DADOIZsvLlDyWZIOHDigJUuW6NixY8rPz9emTZv04IMPKjExUYMGDSppZ28++3SOmwtkZmaacjYDZaSmpprU1FSry4CTXHH8XnrpJRMfH28kmcjISJOSkmLmzp1rIiMjjSTTqFEjs3v3bjNv3jwTGxtrJJn69eubb7/91hhjzMCBA01ISIipU6eOCQ4ONrGxsaZLly5m9+7dpfZz9OhR06FDBxMeHm6SkpLM448/bkaMGGEkmYYNG5q9e/caY4zZsmWLqV+/vomIiDA33XST+emnn8x7771nYmJizJQpUyr1txrj+flx8ODBJiQkxOTm5pZsy8rKMsnJyUaSqVmzpnnsscfKfeyIESNM586dS20rKioyM2fONI0aNTIhISGmevXqpmvXruabb74paePI8Ttz5owZOXKkSUxMNMHBwSYuLs50797d7Ny50xhjTNeuXY0kM27cuAr/zk2bNpkbb7zRJCQkGElGkomPjzft2rUzGzZsKNP+rrvuMnXq1DFFRUX2PZEu4O75jvkU9pJkMjMzrS4DTnLF8Qu07PX0/Ej2ek/2unu+Yz6FPbg+4ttccfwCLXeNcd/8SMZak7HuzjvmSdiL6x6+jevIjuM6sntyNiUlxSQlJZno6GgTFhZmkpOTTVpamtmxY0eZths2bDA33HCDCQsLMwkJCWbEiBHm9OnT5fbr6XNeT4wP5l1cCu/jfBvnu87x9PXAQMnnYcOGmeTkZBMVFWWCg4NN3bp1zYABA8yPP/5Ypq29+eyjOb6UxVdwGm/efJs3HL+BAweayy67zNIaHOHp+TE7O9sEBwebhQsXemyfrlRYWGhuvvlmM3/+fJf1+fPPP5vw8HDz/PPPu6xPe7D4Ct6CxQK+zRuOn69lr6fnR7K3LKuyl8VX8AZcH/Ft3nD8fC13jXHf/EjGluWJjGXxFbwF1z18mzccP1/LVK4jO8YdOWsvK855WXwFb8D7ON/mDcfP17LZGM9fDySf3c/LcnwpPzsIwFKFhYVWl+C1GjZsqEmTJmnSpEk6efKk1eU4pLCwUCtXrtSJEyeUlpbmsn4nTJigVq1aafDgwS7rEwACDdl7cWRvWWQvAFQOuXsOGVsWGQsAjiFTL46cdR55DADOI5srRj67n7fluFcvvrr++usVFBSkVq1aubzvBx98UDExMbLZbNq2bZvD7d577z1VrVpVf//7311em7OKioo0e/ZstWvXrtz7J02apKuuukqxsbEKCwtTw4YN9dRTT3nsxb5ixQo1aNBANpvtorcrrrjCJfti7MBfjBo1Sj169FBaWpqOHz9udTl2W79+vVasWKE1a9YoMjLSJX3OmjVL27Zt03vvvaeQkBCX9ImymD8dc6nsnT59upo2baqIiAhFRUWpadOmGjt2rHJyctxeG7l7jjeOG3g3svc3ZK/7MX865lK5e6HTp0+radOmGjNmjJsrO4fsPccbxw68Axn7GzLW9ZgXHWNPpm7cuFE33nijIiMjlZCQoJEjR+rMmTMeqY9MPccbxw68FznrOPLYM5hnHWNPRjt6buwKZPM53jhm4N3IZ/fxxhz36sVXn332mTp06OCWvl977TW9+uqrTrczxrijLKdlZ2frlltu0dChQ5Wbm1tum3Xr1umxxx7Tnj179PPPP2vatGmaM2eOevTo4ZEau3fvru+++07JycmqWrWqjDEyxqigoEC5ubk6dOiQy168jB3v98wzz2jBggU6fvy4kpKStHz5cqtL8lpTp07V4MGD9eyzz1pdit06duyoxYsXKz4+3iX9rVq1SmfOnNH69etVvXp1l/SJ8jF/2s+e7P344481YMAA7d27V4cOHdLkyZM1ffp0paamur0+cvccbxs3ViJ77Uf2kr2ewvxpP3ty90KjR4/WN9984+bKfkP2nuNtY8cq5G75yFgy1l2YF+1nT6bu3LlTnTp1UseOHXXkyBFlZWXp9ddf16BBgzxSI5l6jreNHauQqfYjZ+1HHnsO86z97MloZ86NXYFsPsfbxoxVyGbHkM+u5605Hmx1Afaw2WxWl1DGXXfd5TWrE7/44gtNmjRJgwYN0qlTpy468UdHR2vgwIEKCgqSJPXs2VMrVqzQ0qVLtW/fPtWrV8+TZZcICgpSRESEIiIi1LhxY5f2zdjxXtOmTdO0adOsLsNndOrUSZ06dbK6DMt07txZnTt3trqMgML8WTF7szc0NFSPPvqowsPDJUk9evTQsmXLtGzZMh08eFAJCQmeLFsSuRvIyF7HkL1krycxf1bM3tw93yeffKIvv/zSA9VdGtkbmMjdiyNjyVh3Yl6smL2ZOnnyZMXHx2vixImy2Wxq27atRo4cqaeeekpPPfWUmjZt6uHKzyFTAxOZ6phAz1l7kceexzxbMXsy2plzY3cjmwMT2ew48tm1vDXHvfqbr4q562vC7J20PTG5G2O0bNkyzZs3z+HHtmzZUitWrNC9996rsLCwi7Z79913SxZeFatZs6YkeXR1dEVWrlzp0v4YOwDgHObPitmbvVlZWSULr4rVqVNHkrziN77JXceRuwDcgfmzYvbmbrG8vDyNGDFCc+bMcaZUtyJ7HUf2AnAE82LF7MnUgoICrV69Wu3bty/199xxxx0yxmjVqlVO1+5KZKrjyFQAVmKerZg9Ge3oubGnkc2OI5sB/+KSxVeFhYUaN26cEhMTFRERoRYtWigzM1OSNGfOHEVFRalKlSq69tprVbt2bYWEhCgqKkrXXHONbr75ZtWrV0/h4eGqVq2annrqqTL979q1S02bNlVUVJQiIiJ08803a+PGjXbXIJ2bvGbOnKkmTZooLCxMVatW1YgRI8rsy552GzduVGJiomw2m15++WVJUnp6uqKiohQZGalVq1bpjjvuUGxsrOrWrauMjIwytU6bNk1NmjRRRESEatasqaSkJE2bNk09e/Z07iA46cCBA4qIiFBSUpJH92sPxo53jx0A1iJ7fXf+zM7OVrVq1VS/fn2P7vdSGDfePW4AWIvc9a35c/To0Xr00UcVFxfn9n1VBmPH+8YOAPcjU71/Xvzuu+908uRJJSYmltqenJwsSdq+fbtb9lsZjB3vGDsAfBsZzTzrSowZxgwQkMwFMjMzTTmbKzR8+HATFhZmli9fbn799VfzzDPPmCpVqpjPPvvMGGPM+PHjjSSzefNmc+rUKfPzzz+bP/7xj0aSWb16tTly5Ig5deqUGTx4sJFktm3bVtJ3x44dTYMGDcz3339v8vPzzZdffml+97vfmfDwcPPtt9/aXcPo0aONzWYz//d//2d+/fVXk5uba+bOnWskma1bt5b0Y2+7ffv2GUnmpZdeKvVYSeaf//ynOX78uDl8+LC5+eabTVRUlDl79mxJu6lTp5qgoCCzatUqk5uba/773/+a2rVrm9///vcOPe/l+d3vfmdatmxpV9tTp06ZmJgYM3jwYKf2lZqaalJTUx1+XHJysqlatWqpbU888YTZsWNHmbaMHfeNHWePXyBzZn6Ef3D368WZ/sne3x7rC9l79uxZs3//fvPSSy+ZsLAws3DhQqf2JclkZmY69Bhy13vGjTPHL9DxfiVwufv14mj/5O5vj/X23N24caNJSUkxxhhz5MgRI8mMHj3aqX05+/6f7PWOscP5m3N4v+Jf3H08uY7sW/PihS6WqRs2bDCSzMyZM8vcFxERYTp27OjwvriO7Ntjh/Myx/E+BBXxxPjgerNvzbMXsud6syOfB5eH813fHjPkjHM434UrVPD6W1rpxVd5eXkmMjLSpKWllWzLzc01YWFh5pFHHjHG/Da5njhxoqTNm2++aSSVmoz/85//GElmyZIlJds6duxYJjy2b99uJJnhw4fbVUNubq6JjIw0t912W6l+MjIySk2a9rYzpuLJNS8vr2Rb8cS8a9eukm3XX3+9ueGGG0rt46GHHjJVqlQxZ86cMZXhSNiOHj3aNG7c2OTk5Di1r8qcNEsqc6somBk757hy7HDS7DjezAQub1t8Rfb6XvbWrl38wFGKAAAgAElEQVTbSDI1atQwL7zwQqmTLkc4u/iK3PWOccPJneN4vxK4vGnxFblr/fx5vopyNzc311x33XVm//79xhhrF1+RvdaPHc7fnMP7Ff/ibYuvyFTfyNS1a9caSWbWrFll7ouNjTXt2rVzeF9cR/btscN5meN4H4KKeOPiKzLaNzLa0TYV4XzXt8cMOeMcznfhChUtvgpWJX3zzTfKzc1Vs2bNSrZFREQoPj5eX3/99UUfFxoaKuncb8gXK/7t1vz8/Ar32bx5c1WtWrXkK44vVcOuXbuUm5urjh07Vtivve0cUfx3nv83nT59WuHh4aXaFRYWKiQkREFBQS7bd0WysrK0dOlSrV27VjExMR7Z5/mqVq2qY8eOlfx7yJAhdj+WseO6sbN//34tXbq0coUGkE2bNkkSz1kA2r9/v+rWrWt1GSXI3op5Y/bu27dPx44d09atWzVq1CjNmzdP69atU61atdy+b4nctYenxk1xlsA++/fvl0T2wlrkbsW8KXefeeYZPfTQQ6pTp47b9mEvsvfSPDV2yBDH8X4F7kKmVsxbMrV4f+c/38XOnj2riIgIt+z3YsjUS+M6svfhOjIq4o3vtcjoinlLRnsLsvnSON/1Xt44B8O3VDSGKr346tSpU5KkMWPGaMyYMaXuS0hIqGz3FxUSElIyYV2qhuIPbeLi4irs0952lXXnnXdq5syZWrVqlTp16qSdO3dq5cqV+tOf/uSRQF6yZIlmzZql9evX6/LLL3f7/uwxZ84cj+2LsfObTz/9VL169XJDpf6N5ywwpaamWl1CCbLXcVZnb0hIiOLi4tSpUyclJSWpcePGmjZtmkfz73zkrn3cMW7mzJlj2XH3ZWQvrETuOs6K3N24caN27NihWbNmuaX/yiJ77eOOsUOGOI73K3AXMtVxVmRqfHy8JCknJ6fU9tzcXJ0+fdqtx8oeZKp9uI7sHXjO4CvIaMdZfb3Zm5DN9uF81ztwvgt3qlLZDoonotmzZ8sYU+rmrpWDBQUF+uWXX5SYmGhXDcWrSM+cOVNhv/a2q6wJEybo1ltvVb9+/RQbG6tu3bqpZ8+eevXVV926X0l66aWXtGjRIq1bt85rFl55EmOntNTU1DJ/N7eL3zIzMyXJ8jq4ef7mTQuvJLLXGVZm74UaNmyooKAg7dy50+P79jTGTVmZmZmWz2m+dEtNTeX9SoDevAm56zgrcnf+/Pn65z//qSpVqshms8lms5U8b1OnTpXNZtPnn3/utv17C8ZOWVbPZ752k3i/4k83b0OmOs6KTE1KSlJMTIx++OGHUtt37dolSWrRooXb9u1NGDulcV7m2I3ryNwquhWPD29CRjvOm643BwrGTFlWz2e+dpM43+VW+VtFOV7pxVf16tVTeHi4tm3bVtmu7Pavf/1LRUVFuuaaa+yqoVmzZqpSpYo2bNhQYb/2tqusnTt3avfu3Tpy5Ijy8/O1d+9epaenq3r16m7bpzFGI0eO1I4dO7Ry5UpFR0e7bV+VcfDgQd1///1u65+xA8AfkL2Os2L+PHr0qHr37l1me3Z2tgoLC1WvXj237dte5G7FyF0AErnrDCvmzwULFpS5GHLkyBFJ0ujRo2WM0XXXXee2/duL7K0Y2Qv4NzLVcVbMi8HBwbrzzjv10UcfqaioqGT7mjVrZLPZlJKS4rZ9O4JMrRiZCsARZLTjmGfLIpsrxpgB/F+lF1+Fh4fr/vvvV0ZGhtLT05WTk6PCwkLt379fBw8edEWNOnv2rI4fP66CggJt2bJFgwcPVv369dWvXz+7aoiLi1P37t21fPlyzZ8/Xzk5Odq+fbvmzZtXaj/2tqusxx57TImJiTp58qRL+63IV199pRkzZujVV19VSEhIyf8ELr49//zzHqulPMYY5eXlacWKFYqNjXVZv4wdAP6I7HWcFfNnVFSU1q5dq3Xr1iknJ0f5+fnaunWr+vbtq6ioKA0dOtRjtVyI3LUPuQtAInedwfxZFtlrH8YO4N/IVMdZNS+OHTtWhw4d0vjx43Xq1Clt2rRJM2fOVL9+/dSkSROP1nIhMtU+ZCoAR5DRjmOe/Q3ZbB/GDBAAzAUyMzNNOZsrdObMGTNy5EiTmJhogoODTVxcnOnevbvZuXOnmTNnjomMjDSSzBVXXGE+/vhj89xzz5mqVasaSaZ27dpm8eLFZsmSJaZ27dpGkqlevbrJyMgwxhizYMEC06FDB1OrVi0THBxsatSoYe655x7zww8/2F2DMcacOHHCPPjgg6ZGjRomOjra3HTTTWbcuHFGkqlbt6754osv7G730ksvmfj4eCPJREZGmpSUFDN37tySv7NRo0Zm9+7dZt68eSY2NtZIMvXr1zfffvutMcaYdevWmRo1ahhJJbeQkBBz5ZVXmhUrVjj03BtjzKZNm8yNN95oEhISSvqLj4837dq1Mxs2bDDGGLNjx45S+7vwNnPmTIf3m5qaalJTU+1un5WVZZKTkyusQ5IZM2aMMcYwdtw8dhw9fnBufoR/cPfrxZn+yV7vz15jjElJSTFJSUkmOjrahIWFmeTkZJOWlmZ27Njh8D6NMUaSyczMtKstuet948aR44dzeL8SuNz9enG0f3LXN3L3QkeOHDGSzOjRox3epzGOv/8ne71r7HD+5hzer/gXdx9PriP71rxojGOZumHDBnPDDTeYsLAwk5CQYEaMGGFOnz7t8D6N4Tqyr48dzsscx/sQVMQT44Przb41zxpjX0Y7e25cHs53fXvMkDPO4XwXrlDB62+pzRhjdJ6lS5eqV69eumAzXCg9PV3Z2dmaPXt2ybazZ8/q6aefVnp6un799VdFRERYWKF9evToIUlatmyZxZUEDleOHY6f45gfA5e7Xy+8Ht3PX7LXZrMpMzNTPXv2tLqUgODqccPxcxzzY+By9+uF16N7+Uvu8v7f81w5djh+zmF+9C/uPp68ztzPXzKV9/Wex3VkazE/oiKeGB+8bt3P1zOaecrzON+1Hue7cIUKXn/Lgq0oKJD99NNPGjx4cJnfnw0NDVViYqLy8/OVn5/v1YEMazB2AMA5zJ9wBuMGAJzD/AlnMXYAoDTmRTiLsQMA7sU8C0cxZoDAUMXqAgJNRESEQkJCNH/+fB06dEj5+fn68ccf9dprr2ncuHFKS0vTjz/+KJvNdslbWlqa1X8OPMiesePK31IGAH9B9sIZ5C4AOIfchbPIXgAojUyFs8hUAHAvMhqOIpuBwMDiKw+rWrWq1q5dqy+//FKNGzdWRESErrrqKi1YsEDPPfec3nzzTTVt2lTGmEvelixZYvWfAw+yZ+zAu3344YcaNWqUVqxYoQYNGpS8ub7vvvvKtO3UqZNiYmIUFBSkq6++Wlu2bLGgYscVFRVp9uzZateuncf627hxo2688UZFRkYqISFBI0eO1JkzZ0ruf+eddzR9+nQVFha6pCb4HrIXziB3/QPZ657+yF5UhNyFs8he30fu2m/KlCnlfvjWrFmzkjbkKchUOItM9X3+nKnTp09X06ZNFRERoaioKDVt2lRjx45VTk5OmbaXOvd0xKRJk3TVVVcpNjZWYWFhatiwoZ566imdPHnS4f2S0SCj4Siy2ff5czbbc35azN5sdmWGu7I+d2c4PztogZtvvlkffPCB1WXABzF2fNf48eO1detWLV68WDExMerevbsaNmyoY8eOadGiRUpLS9Ndd91V0n7t2rV6//339corr2jlypUWVm6/7Oxs3X///fr3v/+tli1beqS/nTt3qlOnTho+fLjWrl2r7du3KyUlRUeOHNHrr78uSUpJSdH333+vjh07auXKlapWrVqla4PvYf6EMxg3vo3sdU9/ZC/swfwJZzF2fBe563rkKSTmRTiPseO7/D1TP/74Yw0YMEB//vOfFRERoTVr1ujee+/V5s2btXbt2pJ29px7OmLdunV67LHHlJaWppCQEK1Zs0Z9+vTRjh07tGbNGof2S0ZDYp6F4xgzvsvfs9le9mazqzPclfW5O8P55isAlsnLy3PZtzRYuY9Lee6557RkyRItXbpUMTExpe578cUXVaVKFQ0cOFDHjx+3qMLK++KLL/T0009r0KBBatWqlcf6mzx5suLj4zVx4kRFRUWpbdu2GjlypN544w19/fXXJe2eeOIJtWzZUnfeeacKCgoqXR8A+KJAyV2J7HVnf2QvANgvULKX3HXOwoULy3zzwZdfflmqDXkKAOeQqf6TqaGhoXr00UcVFxen6Oho9ejRQ126dNEHH3yggwcPlrSz99zTXtHR0Ro4cKAuu+wyxcTEqGfPnuratavef/997du3z+H9ktEA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H8HiKwCSpL/85S9KSkpSt27dlJuba3U5AAD4jH79+ikjI0MnT560uhQAAAAAgI978803dfToUQ0ZMsTqUgAACDgTJ07UBx98oIyMDMXFxVldDgAfwuIrAJKk8PBwZWVlaf/+/Ro4cKDV5QAA4DPuu+8+5efna8WKFVaXAgAAAADwYYWFhXr++efVt29fXX755VaXAwBAQFm9erWmTJmil19+WTfeeKPV5QDwMSy+AlCifv36ysjIUEZGhv76179aXQ4AAD6hRo0aSklJ4acHAQAAAACVsmLFCn333XcaPny41aUAABBQ9uzZo759+6p379566KGHrC4HgA9i8RWAUm677TaNGTNGjz/+uP79739bXQ4AAD7hgQce0Mcff6yvv/7a6lIAAAAAAD5qxowZ6t69uxo1amR1KQAABIzTp0+re/fuqlu3Ll9OAcBpLL4CUMa4ceN022236Z577tGRI0esLgcAAK932223KTExUW+++abVpQAAAAAAfNA//vEP/fe//9VTTz1ldSkAAASUQYMG6fvvv1dWVpYiIyOtLgeAj2LxFYAyqlSpokWLFik0NFS9evVSQUGB1SUBAODVqlSpor59++qNN95Qfn6+1VkVPNsAACAASURBVOUAAAAAAHzMc889p9tvv13XXnut1aUAABAwXn75Zb311ltavHixGjRoYHU5AHwYi68AlKt69erKysrS5s2bNWbMGKvLAQDA6/Xv31+HDx/W+++/b3UpAAAAAAAf8p///Efr16/XyJEjrS4FAICA8emnn2rYsGGaOHGi7rjjDqvLAeDjWHwF4KJatGihefPmacaMGVq+fLnV5QAA4NWuuOIKdejQQa+//rrVpQAAAAAAfMizzz6r66+/Xh06dLC6FAAAAsKhQ4eUmpqqTp066ZlnnrG6HAB+gMVXACp077336uGHH9b999+vr776yupyAADwav3799e7776rgwcPWl0KAAAAAMAHfP3113rnnXf44BcAAA8pKChQr169FBERoYULF6pKFZZMAKg8ZhIAl/TCCy+oVatW6tatm3JycqwuBwAAr9WtWzfFxMRo0aJFVpcCAAAAAPABzz33nBo3bqyUlBSrSwEAICCMHDlS//nPf7R06VJVq1bN6nIA+AkWXwG4pJCQEC1dulQ5OTnq27evjDFWlwQAgFcKDw9X79699dprr5GXAAAAAIAK7d+/XxkZGRo5ciTfugEAgAesXLlSs2fP1l/+8he1bt3a6nIA+BHezQOwS0JCghYvXqx3331Xs2bNsrocAAC8Vv/+/fXtt9/qk08+sboUAAAAAIAXe/7551WrVi317t3b6lIAAPB733zzjfr27avHH39cffv2tbocAH6GxVcA7NahQwdNmzZNI0eO1AcffGB1OQAAeKVrrrlGrVu31uuvv251KQAAAAAAL/XLL79o/vz5Gj58uEJDQ60uBwAAv3by5El169ZNV199tWbOnGl1OQD8EIuvADhk+PDh6t69u/r06aP9+/dbXQ4AAF6pf//+yszM1IkTJ6wuBQAAAADghV544QWFhobqgQcesLoUAAD8mjFG999/v44ePaply5ax6BmAW7D4CoBDbDab5s+fr5o1a6pHjx46c+aM1SUBAOB1+vTpo6KiIi1dutTqUgAAAAAAXubUqVNKT0/X4MGDFR0dbXU5AAD4tenTp2vlypXKzMxUnTp1rC4HgJ9i8RUAh0VHR+tvf/ub/ve//2nYsGFWlwMAgNepVq2aOnfuzE8PAgAAAADK+Otf/6q8vDw9+uijVpcCAIBfW7duncaOHauZM2eqffv2VpcDwI+x+AqAUxo3bqw333xT6enpWrBggdXlAADgdR544AF98skn+uqrr6wuBQAAAADgJfLz8/XCCy9o4MCBqlmzptXlAADgt/bt26e0tDSlpqZqyJAhVpcDwM+x+AqA0zp37qzhw4frkUce0ZYtW6wuBwAAr9KxY0clJyezSBkAAAAAUOKtt97SwYMH9cQTT1hdCgAAfis/P1/33HOPatSooXnz5lldDoAAwOIrAJXy7LPP6pZbblG3bt109OhRq8sBAMBr2Gw23XfffXrrrbeUn59vdTkAAAAAAIsVFRVp1qxZuu+++5SYmGh1OQAA+K3HHntM27dvV1ZWlmJiYqwuB0AAYPEVgEoJCgrS22+/LZvNpnvuuUeFhYVWlwQAgNd44IEHdPToUa1evdrqUgAAAAAAFvvb3/6mr7/+WsOGDbO6FAAA/NbChQv16quvasGCBbryyiutLgdAgGDxFYBKq1GjhjIzM/XRRx9pypQpVpcDAIDXqFu3rjp27Kj58+dbXQoAAAAAwGLPP/+8unbtqquuusrqUgAA8EtffPGFBg4cqFGjRql79+5WlwMggLD4CoBL3HDDDZozZ44mTZqk9957z+pyAADwGv3799f777+vH3/80epSAAAAAAAW+fDDD/Xpp59q+PDhVpcCAIBf+uWXX9StWze1a9dOkyZNsrocAAGGxVcAXObhhx9Wv3791KdPH+3evdvqcgAA8Apdu3ZVtWrV9NZbb1ldCgAAAADAItOnT1fHjh3Vpk0bq0sBAMDvFBUVqU+fPiooKFBGRoaCgoKsLglAgGHxFQCXmjt3rho0aKBu3bopNzfX6nIAALBcaGioevfurVdffVXGGKvLAQAAAAB42LZt2/TPf/5TTz/9tNWlAADgl8aPH69169Zp+fLliouLs7ocAAGIxVcAXCo8PFwrVqzQjz/+qIceesjqcgAA8AoPPvigvvvuO3388cdWlwIAAAAA8LApU6aoZcuW6tixo9WlAADgd959911NmzZNL7/8sq6//nqrywEQoFh8BcDl6tevr4yMDC1ZskTp6elWlwMAgOWaN2+ua6+9Vq+//rrVpQAAAAAAPOibb77R3/72N40ePVo2m83qcgAA8Cu7du3SfffdpwceeEAPPvig1eUACGAsvgLgFn/4wx80btw4DRkyRBs3brS6HAAALPfAAw9o6dKlOnbsmNWlAAAAAAA8ZObMmUpKSlLXrl2tLgUAAL+Sl5ennj176oorrtALL7xgdTkAAhyLrwC4zdixY/WnP/1JPXr00MGDB60uBwAAS/Xu3Vs2m01Lly61uhQAAAAAgAccOHBACxcu1KhRoxQUFGR1OQAA+JVBgwbphx9+UFZWliIiIqwuB0CAY/EVALex2Wx6/fXXFR0drR49eig/P9/qkgAAsEzVqlXVrVu3i/70IDkJAAAAAL6psLCw3O2zZs1SXFyc7rvvPg9XBACAf3vxxRe1cOFCLV68WElJSVaXAwAsvgLgXtWqVVNWVpa2bdumZ555ptw2mzZt8nBVAABYo3///tq8ebO2b98uSTp06JCef/55XXnllfrkk08srg4AANc4duyYfv3111I3STp16lSZ7Sw+BgD4g/Xr1+vGG2/U3//+dxljJEm//PKLXn31VT355JMKDQ21uEIAAHzPZ599poKCgjLbN23apBEjRmjKlCn64x//aEFlAFCWzRSfCQCAG2VkZOjee+/VkiVL1LNnT0lSUVGRJk6cqClTpuirr75SkyZNLK4SAAD3MsaoUaNGatasmYwxWr16tWw2mwoKCvT+++/r9ttvt7pEAAAq7dZbb9W//vWvS7YLCgrSgQMHVLt2bQ9UBQCA+yxcuFB//vOfJUlNmjTR6NGjtWvXLr388svas2ePYmJiLK4QAADfc9VVV6lGjRpavnx5yXnjoUOHdO211+qaa67RqlWrZLPZLK4SACRJy4KtrgBAYLjnnnv0ySef6IEHHtDVV1+thIQE3XPPPfrwww9ls9mUmZmpcePGWV0mAABuk52drcWLF+vYsWN65513FBQUVOqnKU6fPm1hdQAAuM4999yj9evXq6L/71elShXdcsstLLwCAPiFAwcOKCwsTGfOnFF2drb69eunqKgotW/fXkFBQVaXBwCAz/nf//6n//3vfwoKClKLFi20cuVKXX/99erZs6ciIyO1cOFCFl4B8Cr/j707j2+izv8H/kqbtEnvIoUWetCDQyzKpdACAoKwwHJJEby+oisiioAglltuQVxgUeouHqggUBAEVwS1ssACxeUWKkdpKT25KW3plSaf3x/8GolJadImmRyv5+Mxj4fOfGbmnclkXp2ZDzN87SAR2czf//53PPzwwxg8eDDatm2L//znP9BqtdBoNPjqq6+kLo+IiMjiysvL8eWXXyI+Ph4tW7bEe++9hxs3bkAIoffIbJlMxs5XRETkNBISEiCX3//f+8lkMt0TQoiIiBxdfn6+rtOxVquFVqtFcXExdu7ciaZNm2LOnDm4efOmxFUSERE5jo0bN0KhUECj0eDGjRvo2rUr/vKXv+Do0aPYunUr/P39pS6RiEgPO18Rkc14eHjgmWeeQXZ2NgoKCqBWq3XTMjIycPr0aQmrIyIisjy5XI7169cjNTUVQghUVlYabefm5sbOV0RE5DQCAwPRp0+f+z7pw83NDUOHDrVhVURERNaTl5end62zmkajQWFhIRYuXIiwsDC89957ElRHRETkeNavX6/LVo1GA61Wi927d+Oxxx5DVFSUxNURERli5ysisomqqiokJibizTffRFVVld7TPoC7HbOSk5Mlqo6IiMg65HI5vvnmG7Rq1QoKhaLGdux8RUREzub555+HVqs1Ok0ul2PAgAH8l8pEROQ0Ll26dN/X7Qoh4Obmhj59+tiwKiIiIsd08uRJXLhwwWC8EAL79+/Ho48+ioyMDAkqIyKqGTtfEZHV5eXlIS4uDsuWLQMAoxciKisrsW7dOluXRkREZHW+vr7YuXMnfH19a3wCCF87SEREzmbQoEHw9PQ0Ok2j0eD555+3cUVERETWk5eXV+M0d3d3eHp6IiUlBR06dLBhVURERI5p06ZNNf5DVrVajfPnz6Ndu3bYuXOnjSsjIqoZO18RkdVNmzYNR44cgUajuW+7rKwsHD9+3EZVERER2U6zZs3w448/Qi6XQyaTGUxn5ysiInI2Xl5eGDp0qNEL5iqVCv3795egKiIiIsvTarW4fv260Wlubm5QKBTYuXMnOnXqZOPKiIiIHNO6deuMvs63WlVVFYqLi/Haa6/hypUrNqyMiKhm7HxFRFb31VdfYdOmTfD394dcLq+xHV89SEREzqxjx473fcojO18REZGzefbZZw0umCsUCiQkJEClUklUFRERkWVdu3YNVVVVBuPv7Xj1+OOPS1AZERGR4zly5Aiys7NrnO7u7g6ZTIbRo0fj1KlTaNy4sQ2rIyKqGTtfEZFNDB8+HJmZmRg1ahSAuxcf/qz61YPGXktIRETkDBISEjBv3jyjT7+qqKiQoCIiIiLr6du3L/z9/fXGqdVqPPvssxJVREREZHn5+fkG4+7teNWjRw/bF0VEROSgkpOTa3zloLu7O8LCwrB7926sXr0afn5+Nq6OiKhm7HxFRDYTGBiITz75BD/88AOCg4ONPgUrLy8Phw8flqA6IiIi25gxYwaee+45uLu768YJIfjkKyIicjoKhQIjR46Eh4eHblxAQAB69eolYVVERESW9efOV25ubpDL5dixYwd69uwpUVVERESORwiB9evXGzxBWS6Xw93dHW+//TbOnj3Ljs1EZJfY+YqIbK5fv35IT0/H5MmT4ebmpnfzma8eJCIiZyeTyfD5558jPj5e96+42PmKiIic1TPPPIPKykoAdztjPf/88/d9HT0REZGjycvL02WbTCaDm5sbtm7dys7GREREZjp06JDRTs1t27bFyZMnsXjxYnh6ekpUHRHR/bHzFRFJwsvLC4sXL8aRI0fQunVrXQesyspKfP3119BqtRJXSEREZD0KhQLbtm1DaGgo5HI5tFotO18REZFT6tatGxo3bgzg7isHR44cKXFFRERElpWfnw93d3fIZDK4u7tj69atGDBggNRlEREROZzk5GTdk5MVCgU8PT2xaNEiHDp0CA899JDE1RER3R87XxGRpNq1a4cjR47g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V27dunWztaE/a+cf//iHbr31Vvn5+aljx4565JFHdPz4cdtx+rP2avK+UFZWpldeeUXR0dHy8PBQQECAunXrpoyMDEmX7/e1a9favfbbtGnTkI8CAAAAAE5H+AoAAAAAANSbYRjOLqHJCwoK0oYNG3TgwAF98MEHdsdefPFFLVu2TLNnz9b999+v9PR0derUSa1bt9aHH36o9evX27XftGmT1qxZo1GjRmn//v3q3bt3Yz5KnRw8eFADBgzQM888o+Li4mrb7N+/X8OGDdPgwYN16tQpffbZZ/rLX/6iyZMn29rcfffdMpvNGjx4sPLy8upVE/1+Af3e+OjPmktISNBvf/tbjRkzRjk5OVq3bp2SkpJ01113qby8XBL9WVs1eV+QpHHjxul///d/9dFHH6m4uFg///yzOnXqpHPnzkm6fL/fc889ysnJUVJSkkaMGNHgzwMAAAAAzkb4CgAAAAAA1NvIkSOVn5+vUaNGObsUWSyWK87k4SxeXl668847df3118vT09O2/9VXX9XHH3+s1atXy8/Pz+6cZcuWycXFRZMmTVJ+fn5jl+wwe/fu1cyZMzV58mT17Nnzsu1efvllhYSEaMGCBfLx8VFMTIxmzJihv/71r/rll19s7aZOnaoePXpoxIgRtvBFbdHv/0G/O97f//53GYZht/344492bejPmvmf//kftWvXTs8995xatWqlnj176plnntGePXu0fft2Wzv6s2Zq+r7w8ccfa+3atVqzZo369u0rNzc3hYaGat26dXazuFXX7yaTSWFhYerfv786d+7c4M8EAAAAAM5G+AoAAAAAALQoH3zwgU6ePOnsMmrk0KFDeuGFF7RgwQKZzeYqx2NjYzVt2jQdOXJEzz77rBMqdIwePXro008/1W9/+1u74NnFysvLtX79eg0cOFAmk8m2/6677pJhGFq3bp1d+/nz52vPnj1aunRpreuh3/+Dfncu+vPqsrOzFRoaavf67NChgyQpMzPTri39eXU1eV+QpP/+7/9W79691b1796tesz79DgAAAAAtAeErAAAAAABQL8nJyQoPD5fJZNLbb78tSVqxYoV8fHzk7e2tdevW6a677pK/v7/at2+vVatW2c5dtmyZzGazrrvuOj3++OMKDQ2V2WxWbGys3YwmU6ZMkYeHh0JCQmz7nnzySfn4+MhkMik3N1eSNG3aNE2fPl1paWkymUyKjo6WJH3xxRfy9/fXokWLGqNLamzZsmUyDEN33333ZdssXLhQ119/vd5//30lJiZe8XqGYWjx4sW64YYb5OnpqcDAQN177712sxfV9GcjSVarVfPmzVN4eLi8vLx08803KyEhoX4PfRnp6ek6d+6cwsPD7fZ36tRJkvTDDz/Y7Q8MDNTAgQO1dOnSWi97Sb//B/3+H43Z75Xoz6uLioqqEqg9fvy47djF6E/HKC0t1bfffnvFmbEuVp9+BwAAAICWgPAVAAAAAACol/j4eH3zzTd2+5544gk9/fTTslgs8vPzU0JCgtLS0hQVFaWJEyeqrKxM0oVQ1YQJE1RcXKypU6cqIyNDu3btUnl5uYYOHars7GxJFwbFx44da3eP5cuXa8GCBXb7li5dqlGjRqlTp04yDEOHDh2SdGHQWpIqKioapA/qav369erSpYu8vb0v28bLy0t//etf5eLiookTJ6qoqOiybefPn69Zs2Zpzpw5OnnypJKSkpSdna3+/fvrxIkTkmr+s5GkmTNn6vXXX9eSJUt07NgxjRo1Sg8++KB27NjhuE74/yrDFJcu9WU2m+Xl5WWr/2K9evXSkSNHtHfv3lrdi37/D/q9Yfp91qxZCgwMlIeHhyIjI3Xvvffq+++/r7Yt/Xlls2fP1vHjx/XWW2+psLBQ+/fv19KlSzV8+HD169evSnv6s/6OHj2q0tJS7dy5U4MGDbIFo2+44QYtX7682oBVXfsdAAAAAFoCwlcAAAAAAKBBxcbGyt/fX8HBwRo/fryKioqUlZVl18bNzc02O8iNN96oFStWqLCwUCtXrnRIDSNHjlRBQYFeeOEFh1zPEYqKinT48GHbDENXEhMTo6effloZGRmaOXNmtW0sFosWL16s++67Tw899JBatWql7t2765133lFubq7efffdKudc6WdTUlKiFStWaPTo0br//vsVEBCguXPnyt3d3WE/l4udP39ekuTq6lrlmLu7uywWS5X9nTt3liTt27evxveh3+3R747v99///vf617/+pezsbJ07d06rVq1SVlaWBg4cqP3791dpT39e2cCBAzVjxgxNmTJF/v7+6tatmwoLC/X+++9X257+rL9z585JkoKDg7Vo0SLt379fJ06c0L333qunnnpK//jHP6qcU5d+BwAAAICWgvAVAAAAAABoNB4e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5ZdfZDKZrrqNHz/e2aUCAK4RiYmJmjVrlj799FNFRUXZfhf97ne/q9J22LBh8vPzk6urq2666Sbt2rXLCRXXXUlJibp27aq5c+fa7S8rK9O8efMUFRUlDw8PhYWF6dlnn5XFYrG1+de//qXXXntNVqu1scsGAAAAAAAO5ubsAgAAAAAAddO1a1eWYgEANBkvvviidu/erY8++kh+fn66//77FR0drby8PH344YcaP368Ro4caWu/adMmffHFF3rnnXe0du1aJ1ZeN3PmzNGBAweq7J82bZr+8pe/aOXKlRo5cqR27type+65R8eOHdNHH30kSbr77rt1+PBhDR48WGvXrlVAQEBjlw8AAAAAAByEma8AAAAAAIBTWSwWxcbGNvt7ANeyV199VR9//LFWr14tPz8/u2PLli2Ti4uLJk2apPz8fCdV6FjffPONfvzxxyr709PT9c477+jhhx/W+PHj5efnp9tvv11TpkzRP/7xD/3888+2tlOnTlWPHj00YsQIlZeXN2b5AAAAAADAgQhfAQAAAAAAp/rggw908uTJZn8P4Fp16NAhvfDCC1qwYIHMZnOV47GxsZo2bZqOHDmiZ5991gkVOpbFYtFzzz2npUuXVjn2/fffq6KiQn379rXbf+edd0qSNm7caLd//vz52rNnT7XXAgAAAAAAzQPhKwAAAAAAUCuGYWjx4sW64YYb5OnpqcDAQN1777365ZdfbG2mTJkiDw8PhYSE2PY9+eST8vHxkclkUm5urqQLy3NNnz5daWlpMplMio6O1rJly2Q2m3Xdddfp8ccfV2hoqMxms2JjY7V9+3aH3EOSvvjiC/n7+2vRokUN2l9AS7ds2TIZhqG77777sm0WLlyo66+/Xu+//74SExOveL2avMesWLFCPj4+8vb21rp163TXXXfJ399f7du316pVq+yuZ7VaNW/ePIWHh8vLy0s333yzEhIS6vy8c+bM0ZNPPqng4OAqx1xcLnzd6uXlZbe/c+fOkmQ385UkBQYGauDAgVq6dClLCQMAAAAA0EwRvgIAAAAAALUyf/58zZo1S3PmzNHJkyeVlJSk7Oxs9e/fXydOnJB0IYwxduxYu/OWL1+uBQsW2O1bunSpRo0apU6dOskwDB06dEhTpkzRhAkTVFxcrKlTpyojI0O7du1SeXm5hg4dquzs7HrfQ7oQyJCkiooKx3UOcA1av369unTpIm9v78u28fLy0l//+le5uLho4sSJKioqumzbmrzHPPHEE3r66adlsVjk5+enhIQEpaWlKSoqShMnTlRZWZntejNnztTrr7+uJUuW6NixYxo1apQefPBB7dixo9bPmpKSorS0ND344IPVHu/ataukqiGr1q1bS5JOnTpV5ZxevXrpyJEj2rt3b63rAQAAAAAAzkf4CgAAAAAA1JjFYtHixYt133336aGHHlKrVq3UvXt3vfPOO8rNzdW7777rsHu5ubnZZr658cYbtWLFChUWFmrlypUOuf7IkSNVUFCgF154wSHXA65FRUVFOnz4sDp16nTVtjExMXr66aeVkZGhmTNnVtumLu8xsbGx8vf3V3BwsMaPH6+ioiJlZWVJkkpKSrRixQqNHj1a999/vwICAjR37ly5u7vX+r3EYrFo2rRpWrFixWXbdO/eXXfeeaeWL1+uLVu2qKSkRMePH9dnn30mk8lkFwqrVDkr1r59+2pVDwAAAAAAaBoIXwEAAAAAgBrbv3+/zp07pz59+tjtv/XWW+Xh4WG3LKCj9enTR97e3nZLjwFwrpMnT8owjCvOenWxhQsXqkuXLlq+fLmSk5OrHK/ve4yHh4ck2UJOBw4cUHFxsbp162Zr4+XlpZCQkFq/l8yePVt//OMfFRYWdsV2H3/8scaMGaOHH35YQUFBiouL0z//+U8ZhmGbAetilX1XOasXAAAAAABoXghfAQAAAACAGsvLy5Mk+fr6VjkWEBCgwsLCBr2/p6dntct2AXCOkpISSRf+btaE2WzWypUrZTKZ9Oijj8pisdgdd/R7TOXyhnPnzpXJZLJtmZmZKi4urvF1kpOTtW/fPv3hD3+4attWrVrpnXfeUU5OjoqLi5WWlqY333xTktSuXbsq7b28vCT9py8BAAAAAEDzQvgKAAAAAADUWEBAgCRVG4DIy8tT+/btG+zeZWVlDX4PALVTGRyyWq01PicmJkbPPPOMDh48qJdfftnumKPfY4KDgyVJS5YskWEYdltqamqNr/PBBx9o8+bNcnFxsQW4Kq+9aNEimUwm7dix47Lnf//995KkQYMGVTlWWloq6T99CQAAAAAAmhfCVwAAAAAAoMa6desmX1/fKiGD7du3q7S0VLfccottn5ubm23pL0fYunWrDMNQv379GuweAGrnuuuuk8lkUn5+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dPDgQV27dk2/+MUvVFhYKOl6USkqKsrqHhs3btTy5cutxpKSkhQREaHu3bvLbDbr+PHjkq4XiSSppqamUdbAFrt27VLPnj3l6el50zkeHh76wx/+ICcnJ02fPl3l5eU3nbts2TItXLhQixcvVnFxsfbt26fCwkINGTJE33//vaT6PxdJWrBggdauXavExESdOXNGERERmjx5sg4cONDg7/o///M/ysvL0+TJk+s83qtXL0m1S1Zt27aVJJ07d67WOQ8++KBOnTqlQ4cONTgPAAAAAACALShfAQAAAAAAoMmFh4fLx8dH7du3V3R0tMrLy3Xy5EmrOa1atbLs2NSnTx8lJyerrKxMqampdskwZswYlZaWaunSpXa53p0qLy/Xd999p+7du992blhYmObOnauCggItWLCgzjmVlZVav369nnrqKU2ZMkW+vr4KDQ3Vpk2bdP78eW3evLnWObd6LlVVVUpOTtb48eM1YcIE+fn5acmSJXJxcWnwM6msrFRcXJySk5NvOic0NFRPPPGENm7cqL1796qqqkpnz57Ve++9J8MwrEphN9zYFevw4cMNygMAAAAAAGArylcAAAAAAABwKFdXV0mqs0zzY4888og8PT2tXpnXkhQXF8tsNt9y16sfW7VqlXr27KmNGzfqs88+q3U8NzdXV65c0SOPPGI1PmjQILm6ulq9wrEu//pcjh49qoqKCvXr188yx8PDQ506dWrwM1m0aJF+9atfqUuXLrect2PHDkVGRuq5555TmzZt9Oijj+r999+X2Wy27ID1YzfW7sauXgAAAAAAAI2N8hUAAAAAAACaDTc3tzpfN9cSVFVVSbr+HevD3d1dqampMgxD06ZNU2VlpdXxy5cvS5Jat25d61w/Pz+VlZU1KN+N1xsuWbJEhmFYPidOnFBFRUW9r/PZZ5/p8OHDeuGFF24719fXV5s2bVJRUZEqKiqUl5en//iP/5Akde7cudZ8Dw8PSf9cSwAAAAAAgMZG+QoAAAAAAADNQnV1tS5fvqzAwEBHR2kUN4pDJpOp3ueEhYUpPj5ex44d08qVK62O+fn5SVKdJStb1rF9+/aSpMTERJnNZqvPF198Ue/rbN26VX/+85/l5ORkKXDduPbq1atlGIYOHDhw0/O/+uorSdLw4cNrHbt69aqkf64lAAAAAABAY6N8BQAAAAAAgGYhOztb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e0d5YLcLgqqrq+s8JigoSLGxsTp58qRWrVpl9czT01OS7lhk1ZA98/LykiQlJibKbDZbfb766qt6zVUf7733njZv3qx9+/bpkUceqfX85MmTqq6urvXM3d1dHTt2VHZ2dq0xt27dkvSPPQcAAAAAALAliq8AAAAAAADQImRmZspsNmvYsGGWtrZt2973usLmyNvbW4ZhqLCwsF7jVq1apb59++qbb76xag8ICFD79u116NAhq/aDBw/q1q1bevLJJ+u1Tvfu3WUymZSVlVWvcQ1lNps1f/58HTt2TDt27LjjCV6SLEVkFy5csGovLi7WtWvX1L1791pjbu9xly5dbJwaAAAAAACA4isAAAAAAAA0UzU1Nbp+/bqqqqp09OhRRUdHq0ePHoqMjLT08ff317Vr17Rjxw5VVlbq8uXLOnPmTK25OnbsqPPnzys3N1fFxcWqrKzU7t275e7urri4uCb8Vt9zcXGRn5+f8vPz6zXu9vWDDg4OtdrnzZunjz/+WJs3b1ZRUZGOHTumWbNmycfHRzNmzKj3OlOnTtWWLVuUkpKioqIiVVdXKz8/31L4FBERoS5duujw4cP1mvtOvv32W61bt04bN25Uu3btrK46NAxDv/rVryRJPXv21MiRI7Vx40bt379f5eXlysvLs3y/V199tdbct/c4MDDwgXMCAAAAAAD8M4qvAAAAAAAAYHO//vWvNXToUEnS/Pnz9fzzzyslJUWJiYmSpIEDB+r06dPauHGj5s2bJ0l67rnndPLkScscFRUVCgwMlLOzs4YPH67evXvriy++kJOTk6XP7NmzNXLkSE2aNEl9+vTRqlWrLNfLBQUFKS8vT5I0a9YseXt7q3///ho7dqyuXbvWJPtwL+PGjVN2drbKy8stbb///e/l7++vnJwcDR06VG+88UatccOGDVNsbGyt9mXLlik+Pl4rV65U586dNWLECD322GPKzMyUq6urJNXrHSQlJSkmJkZr165Vp06d5OPjo+joaF2/fl3S99f5FRQUaOfOnff8ngcOHNDTTz+tRx55RAcPHtSRI0fk4+Ojp556Svv375f0/clXdWEYhjIyMhQREaFXX31VHTp0UP/+/XX27Flt375dw4cPrzXm66+/Vrdu3TRw4MA6rQEAAAAAAFAfhrmuf9kAAAAAAAB2ZxiG0tLSFBYWZu8orUZoaKgkKSMj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KwAAAAAAAAAAgCZQvgIAAAAAAAAAAGgC5SsAAAAAAAAAAIAmUL4CAAAAAAAAAABoAuUrAAAAAHYrjz/+eCorK/OrX/2q1FG+8J588smMGzcujz76aHr27JlCoZBCoZALL7xwq7mnnHJKOnTokJYtW+bII4/MvHnzSpB4x9TW1mbSpEnp3bt3ysrK0qlTp/Tr1y9Lly791DUbNmzI4YcfnhtvvLF+7Je//GXuvPPO1NXV7YLUAAAAwJ5E+QoAAACA3UqxWCx1hN3CzTffnGnTpuWGG27IueeemyVLlqRXr17Zd99988ADD+Sxxx5rMP83v/lNqqurM2TIkCxcuDDHHHNMiZI33vDhw/PTn/40Dz74YNavX5+//vWv6dWrV9auXfupa8aPH5/XXnutwdgZZ5yR8vLynHzyyVm5cuXOjg0AAADsQZSvAAAAANitnH766Vm1alWGDBlS6iipqanJ4MGDSx1jK3fccUcefvjhzJo1Kx06dGhwbNq0aWnRokUuu+yyrFq1qkQJP7/YUFYlAAAgAElEQVSHH344s2fPTnV1db761a+mVatW6datW+bMmZN+/fptc82zzz6bP//5z9s8ds011+Too4/Oaaedlk2bNu3M6AAAAMAeRPkKAAAAAJro/vvvz/Lly0sdo4FFixblpptuyoQJE1JeXr7V8cGDB2f06NF555138r3vfa8ECZvHj3/84xxzzDHp379/o+bX1NTk+9//fqZOnfqpc2655ZbMnz9/u3MAAAAA/pnyFQAAAAC7jWeeeSYHHXRQCoVCfvSjHyVJqqqq0q5du7Rt2zZz5szJqaeemo4dO6ZHjx556KGH6tdOmzYt5eXl6dq1ay6//PJ069Yt5eXlGTx4cF544YX6eVdffXXKyspywAEH1I9dddVVadeuXQqFQlasWJEkGT16dMaOHZvFixenUCikd+/eSZJf//rX6dixYyZOnLgrLslWpk2blmKxmDPOOONT59x+++057LDDct999+XJJ5/c7n7FYjGTJ09O375906ZNm3Tu3DlnnXVWXn311fo5jb0HSVJXV5cf/OAHOeigg1JRUZGjjjoqM2fO3KHvuHHjxjz//PMZMGBAo9eMHz8+V111Vbp06fKpczp37pwTTjghU6dO9XpLAAAAoFGUrwAAAADYbXzta1/Ls88+22DsyiuvzLXXXpuampp06NAhM2fOzOLFi9OzZ89ceumlqa2tTfJJqWrUqFFZv359rrnmmixdujTz5s3Lpk2b8vWvfz3Lli1L8kl5adiwYQ3OMX369EyYMKHB2NSpUzNkyJD06tUrxWIxixYtSvJJuShJNm/evFOuwWd57LHH0qdPn7Rt2/ZT51RUVOQnP/lJWrRokUsvvTTr1q371Lm33HJLxo0bl/Hjx2f58uV5+umns2zZshx//PF5//33kzT+HiTJ9ddfn7vuuitTpkzJe++9lyFDhuSCCy7ISy+91Ojv+O6772bjxo354x//mJNOOqm+SNe3b99Mnz59q+LU73//+yxevDgXXHDBZ+795S9/Oe+8807+9Kc/NToPAAAAsPdSvgIAAABgjzF48OB07NgxXbp0yYgRI7Ju3bq89dZbDea0atWq/ilORxxxRKqqqrJmzZrMmDGjWTKcfvrpWb16dW666aZm2W9HrFu3Lm+88UZ69er1mXMHDRqUa6+9NkuXLs3111+/zTk1NTWZPHlyzjnnnIwcOTKVlZXp379/7r777qxYsSL33HPPVmu2dw82bNiQqqqqnH322Tn33HPTqVOn3HjjjWnduvUOXf+1a9cmSbp06ZKJEydm4cKFef/993PWWWflO9/5Tn72s581+A6jR49OVVVVo/Y+9NBDkyQLFixodB4AAABg76V8BQAAAMAeqaysLEkaPHVpW4499ti0bdu2wWv0dlfLly9PsVjc7lOv/tntt9+ePn36ZPr06XnmmWe2Or5w4cKsXbs2xx57bIPx4447LmVlZQ1e17gt/3oPXnvttaxfvz79+vWrn1NRUZEDDjhgh65/mzZtkiRHHnlkBg8enH322SeVlZWZMGFCKisrG5TCbrjhhnz7299O9+7dG7X3lmu35aleAAAAANujfAUAAADAXq9Nmzb54IMPSh3jc9uwYUOSf5STPkt5eXlmzJiRQqGQiy++ODU1NQ2Or1y5MknSvn37rdZ26tQpa9as2aF8W15veOONN6ZQKNR/3nzzzaxfv77R+3Tr1i1JsmLFigbjZWVlOfjgg7N48eIkyTPPPJMFCxbkkksuafTeFRUVSf5xLQEAAAC2R/kKAAAAgL1abW1tVq5cmR49epQ6yue2pThUV1fX6DWDBg3KmDFj8vrrr+e2225rcKxTp05Jss2SVVOuWZcuXZIkU6ZMSbFYbPB57rnnGr1P+/btc+ihh+Yvf/nLVsc2bdqUysrKJMn999+f3/72t2nRokV90WtLhokTJ6ZQKOSll15qsH7jxo1J/nEtAQAAALZH+QoAAACAvdrcuXNTLBYzcODA+rFWrVp95usKv4i6du2aQqGQVatW7dC62267LYcffnhefvnlBuP9+vVL+/bttyoovfDCC9m4cWO+8pWv7NB5DjzwwJSXl2f+/Pk7tG5bhg8fnpdffjlLliypH1u/fn3efPPN9O/fP0kyY8aMrUpeW55wNn78+BSLxa1eqbjl2u2///6fOyMAAACw51O+AgAAAGCvsnnz5nz88cfZtGlTXnnllYwePToHHXRQRo0aVT+nd+/e+eijjzJ79uzU1tbmgw8+yJtvvrnVXvvss0/efffdLF26NGvWrEltbW2eeOKJdOzYMRMnTtyF3+oTbdu2Tc+ePfP222/v0Lotrx9s2bLlVuNjx47Nz3/+8zzwwANZvXp1FixYkCuuuCLdunXLZZddtsPnueiii/LQQw+lqqoqq1evTl1dXd5+++289957SZIRI0Zk//33z7x587a715gxY3LwwQdn1KhReeutt/Lhhx/muuuuS01NTa6//vodyvXPtly7LQUuAAAAgO1RvgIAAABgt/GjH/0oxx13XJLkuuuuy5lnnpmqqqpMmTIlSXLUUUdlyZIluffeezN27NgkyTe/+c28/vrr9Xts2LAh/fv3T0VFRY4//vgcdthheeqpp9KmTZv6OVdeeWVOOumknH/++enTp09uu+22+tfQDRo0KMuWLUuSXHHFFenatWuOOOKInHbaafnoo492yXXYntNPPz0LFy5MTU1N/dgvfvGL9O7dO4sXL85xxx2X7373u1utGzhwYMaMGbPV+M0335xJkybl1ltvzX777ZcTTjghX/rSlzJ37ty0a9cuSXboHkydOjXXXntt7rzzzuy7777p1q1bRo8enY8//jjJJ6/9W758eebMmbPd79m5c+f87ne/S48ePTJgwIB07949f/jDH/LYY49lwIABTbhyn3jxxRfTvXv3HHXUUU3eAwAAANh7FIrFYrHUIQAAAGBvNHTo0CRJdXV1iZPwrwqFQmbOnJlhw4aVOsoeZdasWRk+fHhK+eeoyy+/PNXV1fnwww9LlmFH7ejvcdGiRenbt29mzJiRkSNH7uR0zW/z5s058cQTM2rUqFx88cW79NwffvhhevTokdtvv72+ONZYX4TfNwAAALDLVXvyFQAAAAB7lbq6ulJH2Kl69+6dW2+9NbfeemvWrl1b6jg7pK6uLrNnz86aNWsyYsSIXX7+W265JQMGDMjVV1+9y88NAAAA7J6UrwAAAGA3dskll6RDhw4pFAqZP39+qeOU1O23355CobDVp1+/fjv1vI8++mh69uy51XnLysrStWvXnHjiifnhD39Y/0o12BXGjRuXoUOHZsSIEVm1alWp4zTa3Llz8+ijj+aJJ55I27Ztd+m5J0+enPnz5+fxxx9P69atd+m5AQAAgN2X8hUAAADsxu67777ce++9pY6xVzv33HOzZMmS9OrVK5WVlSkWi9m8eXOWL1+eWbNm5ZBDDsl1112XI488Mi+99FKp4+7VbrjhhsyYMSOrVq3KIYcckkceeaTUkXaqiRMn5uqrr85//dd/lTpKo5188sl58MEHc8ABB+zS886ZMyd///vfM3fu3HTu3HmXnhsAAADYvSlfAQAAAF8YNTU1GTx4cJPX/5//839SLBYbfP785z83Y8LGKRQK6dSpU0488cTMmDEjs2bNyvvvv5/TTz99t3oK0af5vPepVCZNmpS///3vKRaLeeONN3LeeeeVOtJOd8opp+SOO+4odYwvvDPPPDPjxo1Ly5YtSx0FAAAA2M0oXwEAAMBurlAolDpCs7n//vuzfPnyUsdoduedd15GjRqV5cuX5+677y51nM9tT71PAAAAALCjlK8AAABgN1IsFvPDH/4wffr0SZs2bVJZWZnvf//7Debcddddadu2bTp06JDly5dn7Nix6d69e1577bUUi8VMnjw5ffv2TZs2bdK5c+ecddZZefXVV+vXT5s2LeXl5enatWsuv/zydOvWLeXl5Rk8eHBeeOGFrfJ81n5XX311ysrKGrxG7Kqrrkq7du1SKBSyYsWKJMno0aMzduzYLF68OIVCIb17994Zl7BkRo0alSR54oknkrhPAAAAALAnUL4CAACA3chNN92U6667Lpdddlnef//9/O1vf8v111/fYM7//J//M2PGjMnatWszadKkHHLIIRk4cGCKxWJuueWWjBs3LuPHj8/y5cvz9NNPZ9myZTn++OPz/vvvJ/mkhDNq1KisX78+11xzTZYuXZp58+Zl06ZN+frXv55ly5bVn6sx+02bNi3Dhg1rkHH69OmZ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AAAA7DXuv//+LF++fLc/x/YsWrQoN910UyZMmJDy8vKtjg8ePDijR4/OO++8k+9973slSNg8fvzjH+eYY45J//79GzW/pqYm3//+9zN16tRPnXPLLbdk/vz5250DAAAA8M+UrwAAAAD4wioWi5k8eXL69u2bNm3apHPnzjnrrLPy6quv1s+5+uqrU1ZWlgMOOKB+7Kqrrkq7du1SKBSyYsWKJMno0aMzduzYLF68OIVCIb179860adNSXl6erl275vLLL0+3bt1SXl6ewYMH54UXXmiWcyTJr3/963Ts2DETJ07cqdcr+eTJVsViMWecccanzrn99ttz2GGH5b777suTTz653f0acw+qqqrSrl27tG3bNnPmzMmpp56ajh07pkePHnnooYca7FdXV5cf/OAHOeigg1JRUZGjjjoqM2fO3KHvuHHjxjz//PMZMGBAo9eMHz8+V111Vbp06fKpczp37pwTTjghU6dOTbFY3KFMAAAAwN5J+QoAAACAL6xbbrkl48aNy/jx47N8+fI8/fTTWbZsWY4//vi8//77ST4pGw0bNqzBuunTp2fChAkNxqZOnZohQ4akV69eKRaLWbRoUa6++uqMGjUq69evzzXXXJOlS5dm3rx52bRpU77+9a9n2bJln/scySeFoyTZvHlz812cT/HYY4+lT58+adu27afOqaioyE9+8pO0aNEil156adatW/epcxtzD6688spce+21qampSYcOHTJz5swsXrw4PXv2zKWXXpra2tr6/a6//vrcddddmTJlSt57770MGTIkF1xwQV566aVGf8d33303GzduzB//+MecdNJJ9aW5vn37Zvr06VsVp37/+99n8eLFueCCCz5z7y9/+ct555138qc//anReQAAAIC9l/IVAAAAAF9INTU1mTx5cs4555yMHDkylZWV6d+/f+6+++6sWLEi99xzT7Odq1WrVvVPdjriiCNSVVWVNWvWZMaMGc2y/+mnn57Vq1fnpptuapb9Ps26devyxhtvpFevXp85d9CgQbn22muzdOnSXH/99duc05R7MHjw4HTs2DFdunTJiBEjsm7durz11ltJkg0bNqSqqipnn312zj333HTq1Ck33nhjWrduvUPXeu3atUmSLl26ZOLEiVm4cGHef//9nHXWWfnOd76Tn/3sZw2+w+jRo1NVVdWovQ899NAkyYIFCxqdBwAAANh7KV8BAAAA8IW0cOHCrF27Nscee2yD8eOOOy5lZWUNXgvY3I499ti0bdu2wav1dgfLly9PsVjc7lOv/tntt9+ePn36ZPr06XnmmWe2Ov5570FZWVmS1D/56rXXXsv69evTr1+/+jkVFRU54IADduhat2nTJkly5JFHZvDgwdlnn31SWVmZCRMmpLKyskEp7IYbbsi3v/3tdO/evVF7b7l2W57qBQAAALA9ylcAAAAAfCGtXLkySdK+ffutjnXq1Clr1qzZqedv06ZNPvjgg516jua2YcOGJP8oJ32W8vLyzJgxI4VCIRdffHFqamoaHG/ue7Dl9YY33nhjCoVC/efNN9/M+vXrG71Pt27dkiQrVqxoMF5WVpaDDz44ixcvTpI888wzWbBgQS655JJG711RUZHkH9cSAAAAYHuUrwAAAAD4QurUqVOSbLPgs3LlyvTo0WOnnbu2tnann2Nn2FIcqqura/SaQYMGZcyYMXn99ddz2223NTjW3PegS5cuSZIpU6akWCw2+Dz33HON3qd9+/Y59NBD85e//GWrY5s2bUplZWWS5P77789vf/vbtGjRor7otSXDxIkTUygU8tJLLzVYv3HjxiT/uJYAAAAA26N8BQAAAMAXUr9+/dK+ffutyjEvvPBCNm7cmK985Sv1Y61atap/tV1zmDt3borFYgYOHLjTzrEzdO3aNYVCIatWrdqhdbfddlsOP/zwvPzyyw3Gd+QeNMaBBx6Y8vLyzJ8/f4fWbcvw4cPz8ssvZ8mSJfVj69evz5tvvpn+/fsnSWbMmLFVyWvL08zGjx+fYrG41SsVt1y7/fff/3NnBAAAAPZ8ylcAAAAAfCGVl5dn7Nix+fnPf54HHnggq1evzoIFC3LFFVekW7duueyyy+rn9u7dOx999FFmz56d2trafPDBB3nzzTe32nOfffbJu+++m6VLl2bNmjX1ZarNmzfn448/zqZNm/LKK69k9OjROeiggzJq1KhmOccTTzyRjh07ZuLEic1/of5J27Zt07Nnz7z99ts7tG7L6wdbtmy51Xhj70Fjz3PRRRfloYceSlVVVVavXp26urq8/fbbee+995IkI0aMyP7775958+Ztd68xY8bk4IMPzqhRo/LWW2/lww8/zHXXXZeamppcf/31O5Trn225dlsKXAAAAADbo3wFAAAAwBfWzTff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nST59a9/nY4dO2bixIm74pJsZdq0aSkWiznjjDM+dc7tt9+eww47LPfdd1+efPLJ7e5XLBYzefLk9O3bN23atEnnzp1z1lln5dVXX62f09h7kCR1dXX5wQ9+kIMOOigVFRU56qijMnPmzB36jhs3bszzzz+fAQMGNHrN+PHjc9VVV6VLly6fOqdz58454YQTMnXqVK+3BAAAAHYZ5SsAAAAAdomvfe1refbZZxuMXXnllbn22mtTU1OTDh06ZObMmVm8eHF69uyZSy+9NLW1tUk+KVWNGjUq69evzzXXXJOlS5dm3rx52bRpU77+9a9n2bJlST4pLw0bNqzBOaZPn54JEyY0GJs6dWqGDBmSXr16pVgsZtGiRUk+KRclyebNm3fKNfgsjz32WPr06ZO2bdt+6pyKior85Cc/SYsWLXLppZdm3bp1nzr3lltuybhx4zJ+/PgsX748Tz/9dJYtW5bjjz8+77//fpLG34Mkuf7663PXXXdlypQpee+99zJkyJBccMEFeemllxr9Hd99991s3Lgxf/zjH3PSSSfVF+n69u2b6dOnb1Wc+v3vf5/Fixfnggsu+My9v/zlL+edd97Jn/70p0bnAQAAAPg8lK8AAAAA+EIYPHhwOnbsmC5dumTEiBFZt25d3nrrrQZzWrVqVf8UpyOOOCJVVVVZs2ZNZsyY0SwZTj/99KxevTo33XRTs+y3I9atW5c33ngjvXr1+sy5gwYNyrXXXpulS5fm+uuv3+acmpqaTJ48Oeecc05GjhyZysrK9O/fP3fffXdWrFiRe+65Z6s127sHGzZsSFVVVc4+++yce+656dSpU2688ca0bt16h67/2rVrkyRdunTJxIkTs3Dhwrz//vs566yz8p3vfCc/+9nPGnyH0aNHp6qqqlF7H3rooUmSBQsWNDoPAAAAwOehfAUAAADAF05ZWVmSNHjq0rYce+yxadu2bYPX6O2uli9fnmKxuN2nXv2z22+/PX369Mn06dPzzDPPbHV84cKFWbt2bY499tgG48cdd1zKysoavK5xW/71Hrz22mtZv359+vXrVz+noqIiBxxwwA5d/zZt2iRJjjzyyAwePDj77LNPKisrM2HChFRWVjYohd1www359re/ne7duzdq7y3XbstTvQAAAAB2NuUrAAAAAHZrbdq0yQcffFDqGJ/bhg0bkvyjnPRZysvL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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "BATCH_SIZE = 10000\n",
        "epochs = 5\n",
        "start = time.time()\n",
        "history= model.fit(X_train,\n",
        "                   y_train,\n",
        "                   epochs=epochs,\n",
        "                   batch_size=BATCH_SIZE,\n",
        "                   callbacks = callbacks,\n",
        "                   verbose=1\n",
        "                  )\n",
        "\n",
        "end = time.time()\n",
        "print((end-start)/60)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AcH1qEVkwza9",
        "outputId": "7268bf08-3df1-4698-c100-e961aed15b2e"
      },
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "34/34 [==============================] - 27s 659ms/step - loss: 0.0643 - mae: 0.1926\n",
            "Epoch 2/5\n",
            "34/34 [==============================] - 22s 659ms/step - loss: 0.0284 - mae: 0.1215\n",
            "Epoch 3/5\n",
            "34/34 [==============================] - 22s 657ms/step - loss: 0.0158 - mae: 0.0865\n",
            "Epoch 4/5\n",
            "34/34 [==============================] - 22s 656ms/step - loss: 0.0115 - mae: 0.0702\n",
            "Epoch 5/5\n",
            "34/34 [==============================] - 22s 655ms/step - loss: 0.0098 - mae: 0.0629\n",
            "Epoch 00005: early stopping\n",
            "1.939892057577769\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicting values using X_test:\n",
        "val_preds = model.predict(X_test)\n",
        "val_preds = target_scaler.inverse_transform(val_preds) \n",
        "val_preds = np.exp(val_preds) - 1"
      ],
      "metadata": {
        "id": "IihxAjpnxi8t"
      },
      "execution_count": 215,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "out = pd.DataFrame({'Predicted':val_preds[:,0],'True':test.Price.values})"
      ],
      "metadata": {
        "id": "uefITtx87Cy_"
      },
      "execution_count": 216,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "out.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "DHhpWOzC7-g8",
        "outputId": "6162c660-d52b-4eca-efa4-cf17056c5e26"
      },
      "execution_count": 217,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-001d8ed0-c144-4ab3-9489-369c08f2315a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Predicted</th>\n",
              "      <th>True</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>121.680878</td>\n",
              "      <td>135.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>91.646996</td>\n",
              "      <td>95.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>486.720795</td>\n",
              "      <td>593.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>150.362640</td>\n",
              "      <td>149.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>242.682190</td>\n",
              "      <td>269.99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-001d8ed0-c144-4ab3-9489-369c08f2315a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-001d8ed0-c144-4ab3-9489-369c08f2315a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-001d8ed0-c144-4ab3-9489-369c08f2315a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    Predicted    True\n",
              "0  121.680878  135.00\n",
              "1   91.646996   95.88\n",
              "2  486.720795  593.50\n",
              "3  150.362640  149.99\n",
              "4  242.682190  269.99"
            ]
          },
          "metadata": {},
          "execution_count": 217
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Conclusion: The Predicted values are comparable to True values. Thus the model can be improved and used for further analysis"
      ],
      "metadata": {
        "id": "s_V3x2B-CTHA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#######################################################################################################################################"
      ],
      "metadata": {
        "id": "0R0naVFjCk0V"
      },
      "execution_count": 214,
      "outputs": []
    }
  ]
}
